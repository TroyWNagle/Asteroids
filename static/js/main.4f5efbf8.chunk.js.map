{"version":3,"sources":["math.js","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","particlePool.js","boostBar.js","powerUpTimer.js","ship.js","asteroid.js","projectile.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/@babel/runtime/helpers/esm/superPropBase.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","homing.js","ufo.js","powerup.js","popups.js","hud.js","game.js","audiocontroller.js","index.js"],"names":["Math","tau","PI","randomBetween","min","max","random","randomInt","lowest","floor","highest","ceil","round","getDirection","x","y","x2","y2","dx","dy","dist","sqrt","direction","acos","getDir","getDistance","circleCollisionDetection","x1","y1","r1","r2","circleRectangleCollision","cx","cy","cr","rx","ry","rw","rh","rec","abs","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","ParticlePool","maxSize","color","speed","this","pool","Float32Array","end","decay","life","randSpeed","vx","sin","vy","cos","lifeNoise","I","last","ctx","save","beginPath","fillStyle","moveTo","arc","fill","restore","BoostBar","boost","width","height","MAXBOOST","particles","fillLength","numParticles","add","createParticles","update","strokeStyle","globalAlpha","strokeRect","fillRect","render","PowerUpDisplay","type","timer","initColor","string","font","fillText","toFixed","Ship","RATE","reloading","rateOfFire","accel","mag","dir","velocity","radius","boostParticles","normalParticles","boosting","boostRecharge","TOPSPEED","powerups","1","2","3","powerupTimers","powerUpDisplays","boostGauge","acceleration","angleNoise","angle","edgeDetection","updateVelocity","checkPowerUps","setRateOfFire","gradient","createRadialGradient","addColorStop","closePath","amount","drawShield","translate","rotate","adjustment","lineTo","stroke","Asteroid","mass","held","surfacePath","createSurface","initVelocity","explodedVelocity","randomRadius","push","context","Projectile","initSpeed","particlePool","targets","_typeof2","obj","Symbol","iterator","constructor","_typeof","_possibleConstructorReturn","self","call","ReferenceError","_assertThisInitialized","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","get_get","property","receiver","Reflect","get","base","object","hasOwnProperty","_superPropBase","desc","getOwnPropertyDescriptor","value","_setPrototypeOf","p","_inherits","subClass","superClass","create","Homing","_this","correction","past","shortest","distance","findDistance","findDirection","delta","point","splice","forEach","findTarget","adjustDirection","storePast","alterPast","lineWidth","UFO","rotation","asteroid","innerRadius","bufferRadius","critical","clock","bounty","setColor","setClock","lineSegments","initLineSegments","goal","CLOCK","xi","xf","yi","yf","xI","xF","yI","yF","player","error","magnitude","updateSpeed","goToGoal","orbitAsteroid","asteroidParticles","segment","PowerUp","pos","initPowerUp","initRapidLineSegments","angle1","angle2","angle3","rect","PopUp","size","initSettings","HUDObject","information","info","Game","menu","screenSide","screenWidth","MAXUFO","MAXASTEROIDS","UFOTIME","POWERTIME","numAsteroids","ship","ufos","kills","ufoTimer","respawning","respawnTimer","projectiles","asteroids","createAsteroids","initParticlePools","score","lives","level","popups","hudObjects","initHUD","constAsteroids","teleports","coolingDown","powerupTimer","gameOver","paused","audioController","keyMap","13","32","37","38","39","65","68","70","87","88","backBufferContext","backBufferCanvas","screenBufferContext","loop","bind","handleKeyDown","handleKeyUp","window","onkeydown","onkeyup","interval","setInterval","event","preventDefault","keyCode","gameState","buttonNames","drawPauseMenu","trigger","ufo","tx","ty","addAsteroid","currLength","collision","spawnSide","otherAsteroid","xVelocityDiff","yVelocityDiff","atan2","m1","m2","u1","u2","v1","v2","vFinal1","vFinal2","projectile","alterPath","aID","points","updateScore","angleChange","newX","newY","catchAsteroid","pow","ufoProjectile","index","j","len","explode","stopTheme","playMenu","ufoID","createBlip","projectileID","destoryed","powerUp","checkAsteroidAlignment","initAsteroids","difference","addUFO","scaling","createPowerUp","ratio","particleCollision","handleAsteriodExplosion","respawn","updatePowerUpDisplay","createPowerUpDisplay","pickUpPowerUp","createPowerUpBlip","k","detectShipCrash","destoryUFO","ufo1","ufo2","projectileHit","projectileDodger","createProjectile","teleport","drawImage","drawGameOver","AudioController","Audio","pickTheme","sounds","over","collisionSound","volume","explosion","shipExplosion","ufoLaser","homing","teleportSound","shieldBreak","homingPickUp","theme","play","pause","sound","muted","Menu","game","highlighted","buttons","musicStarted","initButtons","document","getElementById","getContext","screenBufferCanvas","body","appendChild","handleMouseDown","onmousedown","scaleY","clickButton","clientX","clientY","button","masterReset","stopMenu","playTheme","clearInterval","unmute","mute","drawMenu","drawControls"],"mappings":"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","file":"static/js/main.4f5efbf8.chunk.js","sourcesContent":["//Custom math functions library\r\nMath.tau = Math.PI * 2;\r\n/** @function Math.randomBetween\r\n  * Math prototype function built to easily create ranom floats\r\n  * @param {float} min - the lowest number you want\r\n  * @param {float} max - the highest number you want (I beleive it is non-inclusive)\r\n  * @returns random float between the parameters\r\n  */\r\nMath.randomBetween = function (min, max) {\r\n  return Math.random() * (max - min) + min;\r\n};\r\n\r\n/** @function Math.randomInt\r\n  * Math prototype function built to easily create random integers\r\n  * @param {float} min - the lowest number you want\r\n  * @param {float} max - the highest number you want (I beleive it is non-inclusive)\r\n  * @returns random integer between the parameters\r\n  */\r\nMath.randomInt = function (min, max) {\r\n  let lowest = Math.floor(min);\r\n  let highest = Math.ceil(max);\r\n  return Math.round(Math.random() * (highest - lowest)) + lowest;\r\n};\r\n\r\n/** @function Math.getDirection\r\n  * Math prototype funciton to get the direction between two points/objects\r\n  * @param {float} x - x position of object 1\r\n  * @param {float} y - y position of object 1\r\n  * @param {float} x2 - x position of object 2\r\n  * @param {float} y2 - y position of object 2\r\n  */\r\nMath.getDirection = function(x, y, x2, y2) {\r\n  //Get relative Distances\r\n  let dx = x - x2;\r\n  let dy = y - y2;\r\n  //Find hyp. of triangle\r\n  let dist = Math.sqrt(dx * dx + dy * dy);\r\n  //arcCosine of dy & hyp.\r\n  let direction = Math.acos(dy/dist);\r\n  //Flip the direction based on the relative x\r\n  if(dx > 0) {\r\n    direction *= -1;\r\n  }\r\n  if( direction < 0) {\r\n    direction += Math.tau;\r\n  }\r\n  return direction;\r\n};\r\n\r\n/** @Function Math.getDirection\r\n  * Shorten version of the previous funcion, that takes an already calculated distance.\r\n  * So the distance computation isn't done multiple times for no reason.\r\n  */\r\nMath.getDir = function(dist, x, y , x2, y2) {\r\n  //Get relative Distances\r\n  let dx = x - x2;\r\n  let dy = y - y2;\r\n  let direction = Math.acos(dy / dist);\r\n\r\n  if(dx > 0) {\r\n    direction *= -1;\r\n  }\r\n  if(direction < 0) {\r\n    direction += Math.tau;\r\n  }\r\n  return direction;\r\n};\r\n\r\n/** @Function Math.getDistance()\r\n  * Handles getting the distance, as a float, between two points on the canvas.\r\n  */\r\nMath.getDistance = function(x, y, x2, y2) {\r\n  //Get relative Distances\r\n  let dx = x - x2;\r\n  let dy = y - y2;\r\n  //Find hyp. of triangle\r\n  let dist = Math.sqrt(dx * dx + dy * dy);\r\n  return dist;\r\n};\r\n\r\n/** @function circleCollisionDetection\r\n  * Function to detect collisions between two circles, kept as general\r\n  * as possible for maximum versatility\r\n  * @param {float} x1 - x position of object 1\r\n  * @param {float} y1 - y position of object 1\r\n  * @param {int/float} r1 - radius of object 1\r\n  * @param {float} x2 - x position of object 2\r\n  * @param {float} y2 - y position of object 2\r\n  * @param {int/float} r2 - radius of object 2\r\n  */\r\nMath.circleCollisionDetection = function(x1, y1, r1, x2, y2, r2) {\r\n  let dx = x1 - x2;\r\n  let dy = y1 - y2;\r\n  //Quick check to avoid having to square things\r\n  if(dx > r1 + r2 || dy > r1 + r2) {\r\n    return false;\r\n  }\r\n  //More accurate check\r\n  if(dx * dx + dy * dy >= (r1 + r2) * (r1 + r2)) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n/** @function circleRectangleCollision\r\n* funciton to handle collisions between circles and rectangles,\r\n* @param {float} cx - x position of circle\r\n* @param {float} xy - y position of circle\r\n* @param {int/float} cr - radius of circle\r\n* @param {float} rx - x position of rectangle top left corner\r\n* @param {float} ry - y position of rectangle top left corner\r\n* @param {int} rw - width of rectangle\r\n* @param {int} rh - height of rectangle\r\n*/\r\nMath.circleRectangleCollision = function(cx, cy, cr, rx, ry, rw, rh) {\r\n  //Find the center of the rectangle\r\n  let rec = {x: rx + rw / 2, y: ry + rh / 2}\r\n  //Distances between centers\r\n  let dx = Math.abs(cx - rec.x);\r\n  let dy = Math.abs(cy - rec.y);\r\n\r\n  //Broad distance check\r\n  if (dx > (rw / 2 + cr)) { return false; }\r\n  if (dy > (rh / 2 + cr)) { return false; }\r\n\r\n  //Single dimension checks\r\n  if (dx <= (rw / 2)) { return true; }\r\n  if (dy <= (rh / 2)) { return true; }\r\n\r\n  //Corner Check\r\n  let dist = (dx - rw / 2) * (dx - rw / 2) + (dy - rh / 2) * (dy - rh / 2);\r\n  return (dist <= (cr * cr));\r\n}\r\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","\r\n/** @Class ParticlePool\r\n  * Object pool that manipulates a pool of custom particles for visual effects.\r\n  */\r\nexport default class ParticlePool {\r\n  /** @Constructor\r\n    * Initializes core variables and manually allocates memory for the particle's variables.\r\n    * @param {int} maxSize - maximum size of the array. Array size never changes.\r\n    * @param {string} color - name of the color that the particles in the pool need to be.\r\n    * @param {float} speed - max speed of the particles in the pool in pixels per frame.\r\n    * Note: Each Particle contains 6 floats, to determine its behavior.\r\n    */\r\n  constructor(maxSize, color, speed) {\r\n    this.pool = new Float32Array(6 * maxSize);\r\n    //Keeps track the position of the first position without a particle (count - 1)\r\n    this.end = 0;\r\n    this.max = maxSize;\r\n    this.color = color;\r\n    this.speed = speed;\r\n  }\r\n\r\n  /** @Function add()\r\n    * Handles adding a new particle to the pool.\r\n    * @param {floats} x, y - position variables\r\n    * @param {float} direction - direction the particles travel\r\n    * @param {float} decay - how much the particle's speed decreases each frame. Gives the particles a much smoother look.\r\n    * @param {float} life - determines how many frames a particle will last. But some noise is added to this number for a less stiff look. 1.0 = 10 frames = 1/6 of a second @ 60fps\r\n    */\r\n  add(x, y, direction, decay, life) {\r\n    //Random speed off the max speed\r\n    let randSpeed = Math.randomInt(1, this.speed);\r\n    //Determine x & y velocities based on the direction & speed\r\n    let vx = Math.sin(direction) * randSpeed;\r\n    let vy = -Math.cos(direction) * randSpeed;\r\n    //Add some noise to the life\r\n    let lifeNoise = life + Math.randomBetween(-0.5, 0.5);\r\n    if(this.end < this.max) {\r\n      //Calculate the index\r\n      let i = 6 * this.end;\r\n      this.pool[i] = x;\r\n      this.pool[i + 1] = y;\r\n      this.pool[i + 2] = vx;\r\n      this.pool[i + 3] = vy;\r\n      this.pool[i + 4] = decay;\r\n      this.pool[i + 5] = lifeNoise;\r\n      this.end++;\r\n    }\r\n  }\r\n\r\n  /** @Function update()\r\n    * Updates all the particles currently in the object pool & removes the ones that run out of life\r\n    */\r\n  update() {\r\n    for(let i = 0; i < this.end; i++) {\r\n      //Calculate the real index\r\n      let I = 6 * i;\r\n      //Update X\r\n      this.pool[I] += this.pool[I + 2];\r\n      //Update Y\r\n      this.pool[I + 1] += this.pool[I + 3];\r\n      //Decay X & Y velocities if their speed is greater that 0. I + 4 -> gets the decay for that particle\r\n      if(Math.abs(this.pool[I + 2]) > 0) {\r\n        if(this.pool[I + 2] > 0) {\r\n          this.pool[I + 2] += this.pool[I + 4];\r\n        }\r\n        else {\r\n          this.pool[I + 2] -= this.pool[I + 4];\r\n        }\r\n      }\r\n      if(Math.abs(this.pool[I + 3]) > 0) {\r\n        if(this.pool[I + 3] > 0) {\r\n          this.pool[I + 3] += this.pool[I + 4];\r\n        }\r\n        else {\r\n          this.pool[I + 3] -= this.pool[I + 4];\r\n        }\r\n      }\r\n      //Decrement life. 1.0 = 10 frames of life\r\n      this.pool[I + 5] -= 0.1;\r\n\r\n      //Check if the life ran out\r\n      if(this.pool[I + 5] <= 0.0) {\r\n        //Swap dead particle with the alive one.\r\n        let last = 6 * (this.end - 1);\r\n        this.pool[I] = this.pool[last];\r\n        this.pool[I + 1] = this.pool[last + 1];\r\n        this.pool[I + 2] = this.pool[last + 2];\r\n        this.pool[I + 3] = this.pool[last + 3];\r\n        this.pool[I + 4] = this.pool[last + 4];\r\n        this.pool[I + 5] = this.pool[last + 5];\r\n        //Update the end tracker\r\n        this.end--;\r\n        //Make sure the loop doesn't mess up.\r\n        i--;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @Function render()\r\n    * Function to draw all the particles in the object pool.\r\n    */\r\n  render(ctx) {\r\n    ctx.save();\r\n    ctx.beginPath();\r\n    ctx.fillStyle = this.color;\r\n    for(let i = 0; i < this.end; i ++) {\r\n      ctx.moveTo(this.pool[6 * i], this.pool[6 * i + 1])\r\n      ctx.arc(this.pool[6 * i], this.pool[6 * i + 1], 1, 0, Math.tau);\r\n    }\r\n    ctx.fill();\r\n    ctx.restore();\r\n  }\r\n}\r\n","import ParticlePool from './particlePool.js';\r\n\r\n/** @Class BoostBar\r\n  * Class to help display the players boost.\r\n  */\r\nexport default class BoostBar {\r\n/** @Constructor\r\n  * Sets up the main aspects of the boost bar.\r\n  * @param {int} boost - the amount of boost the player has\r\n  * @param {int} max - the maximum amount of the boost possible.\r\n  */\r\n  constructor(boost, max) {\r\n    //Position variables\r\n    this.x = 500;\r\n    this.y = 950;\r\n    //Dimension variables\r\n    this.width = 400;\r\n    this.height = 25;\r\n    this.MAXBOOST = max;\r\n    this.boost = boost;\r\n    //Keeps track of particles for particle effect\r\n    this.particles = new ParticlePool(200, 'green', 5.0);\r\n    //Keepts track of the ratio of boost to Max Boost.\r\n    this.fillLength = this.width * (this.boost / this.MAXBOOST);\r\n  }\r\n\r\n  /** @Function createParticles()\r\n    * Function to add particles to the particle object pool.\r\n    * @param {int} numParticles - number of particles to add to the pool.\r\n    */\r\n  createParticles(numParticles) {\r\n    //All particles will start on the left of the BoostBar\r\n    let x = 1 + this.x - this.width / 2;\r\n    for (let i = 0; i < numParticles; i++) {\r\n      //Pick a random y position on the BoostBar\r\n      let y = Math.randomBetween(this.y - this.height / 2, this.y + this.height / 2);\r\n      this.particles.add(x, y, Math.PI / 2, 0.0, 7.5);\r\n    }\r\n  }\r\n\r\n  /** @Function update()\r\n    * Function to update all the variables that need to be updated every frame.\r\n    */\r\n  update() {\r\n    //Recalcultes the ratio of boost to MAXBOOST\r\n    this.fillLength = this.width * (this.boost / this.MAXBOOST)\r\n    // Create some particles\r\n    this.createParticles(3);\r\n    this.particles.update();\r\n  }\r\n\r\n  /** @Function render()\r\n    * Standard render function.\r\n    * @param {canvas context} ctx - backBufferContext\r\n    */\r\n  render(ctx) {\r\n    ctx.save();\r\n    ctx.strokeStyle = 'blue';\r\n    ctx.fillStyle = 'blue';\r\n    ctx.globalAlpha = 0.30;\r\n    ctx.strokeRect(this.x - this.width / 2, this.y - this.height / 2, this.width, this.height);\r\n    ctx.fillRect(this.x - this.width / 2, this.y - this.height / 2, this.fillLength, this.height);\r\n    ctx.restore();\r\n    this.particles.render(ctx);\r\n  }\r\n}\r\n","\r\n/** @Class PowerUpDisplay\r\n  * Object to display the players active power ups.\r\n  */\r\nexport default class PowerUpDisplay {\r\n  /** @Constructor\r\n    * Initializes the power up display object.\r\n    * @param {floats} x, y - position variables.\r\n    * @param {int} type - time of the power up. 1 = Homing, 2 = Rapid Fire, 3 = Shield\r\n    * @param {int} timer - number of frames the power up is still active.\r\n    */\r\n  constructor(x, y, type, timer) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.timer = timer;\r\n    this.type = type;\r\n    this.initColor();\r\n  }\r\n\r\n  /** @Function initColor()\r\n    * Handles the assigning of the color & string variables for displaying.\r\n    */\r\n  initColor() {\r\n    switch (this.type) {\r\n      case 1:\r\n        this.color = 'red';\r\n        this.string = 'Homing: ';\r\n        break;\r\n      case 2:\r\n        this.color = 'green';\r\n        this.string = 'Rapid: '\r\n        break;\r\n      case 3:\r\n        this.color = 'magenta';\r\n        this.string = 'Shield: ';\r\n        break;\r\n      default:\r\n\r\n    }\r\n  }\r\n\r\n  /** @Function render()\r\n    * Draws the object to the screen.\r\n    * @param {Canvas Context} ctx - backBufferContext\r\n    */\r\n  render(ctx) {\r\n    ctx.save();\r\n    ctx.fillStyle = this.color;\r\n    ctx.font = \"25px Arial\";\r\n    ctx.globalAlpha = 0.60;\r\n    ctx.fillText(this.string + (this.timer / 60).toFixed(1), this.x, this.y);\r\n    ctx.restore();\r\n  }\r\n}\r\n","\r\nimport ParticlePool from './particlePool.js';\r\nimport BoostBar from './boostBar.js';\r\nimport PowerUpDisplay from './powerUpTimer.js';\r\n\r\n\r\n/** @class Ship\r\n  * Class that handles everything ship related, Super class of UFO\r\n  */\r\nexport default class Ship {\r\n  /** @constructor\r\n    * Handles the initialization of a ship object\r\n    */\r\n  constructor() {\r\n    //position of the center of the Ship\r\n    this.x = 500;\r\n    this.y = 500;\r\n    //Rate of fire variable that helps with resetting the cooldown.\r\n    this.RATE = 40;\r\n    this.reloading = false;\r\n    //timer for rate of fire.\r\n    this.rateOfFire = this.RATE;\r\n    //Acceleration vector\r\n    this.accel = {mag: 0.1, dir: 0.0};\r\n    //Velocity vector\r\n    this.velocity = {mag: 0.0, dir: 0.0};\r\n    //Amount the x & y position gets updated every frame.\r\n    this.speed = {x: 0.0, y: 0.0};\r\n    this.radius = 12;\r\n    //Object pools for the particle trail, one for each color.\r\n    this.boostParticles = new ParticlePool(210, 'blue', 3.0);\r\n    this.normalParticles = new ParticlePool(80, 'red', 2.0);\r\n    this.color = 'green';\r\n    //Variables for managing boost\r\n    this.MAXBOOST = 120;\r\n    this.boosting = false;\r\n    this.boost = 120;\r\n    this.boostRecharge = 1;\r\n    //X & Y speed cannot over come the top speed\r\n    this.TOPSPEED = 3.0;\r\n    // 1 = homing, 2 = rapid fire, 3 = shield\r\n    this.powerups = {1: false, 2: false, 3: false};\r\n    //Timers for respective power ups.\r\n    this.powerupTimers = {1: 0, 2: 0, 3: 0};\r\n    //A display for each power up timer.\r\n    this.powerUpDisplays = {1: '', 2: '', 3: ''};\r\n    //Boost guage object for displaying the boost of the player.\r\n    this.boostGauge = new BoostBar(this.boost, this.MAXBOOST);\r\n  }\r\n\r\n  /** @function updateSpeed()\r\n    * Handles the updating of the player's ship and enforces the speed limit\r\n    * @param {float} acceleration - amount of acceleration introduced. Differnt value based on if you are boosting or not.\r\n    */\r\n  updateSpeed(acceleration) {\r\n    //Alter the direction\r\n    this.speed.y += -Math.cos(this.accel.dir) * acceleration;\r\n    this.speed.x += Math.sin(this.accel.dir) * acceleration;\r\n    //Enforce the max x speed\r\n    if(Math.abs(this.speed.x) >= this.TOPSPEED) {\r\n      if(this.speed.x < 0) {\r\n        this.speed.x = -this.TOPSPEED;\r\n      }\r\n      else {\r\n        this.speed.x = this.TOPSPEED;\r\n      }\r\n    }\r\n    //Enfore the max y speed\r\n    if(Math.abs(this.speed.y) >= this.TOPSPEED) {\r\n      if(this.speed.y < 0) {\r\n        this.speed.y = -this.TOPSPEED;\r\n      }\r\n      else {\r\n        this.speed.y = this.TOPSPEED;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @Function setRateOfFire()\r\n    * Handles the resetting of the rate of fire variable\r\n    */\r\n  setRateOfFire() {\r\n    this.rateOfFire = this.RATE;\r\n    //Check if you have the rapid fire power up.\r\n    if(this.powerups[2]) {\r\n      this.rateOfFire = this.RATE / 2;\r\n    }\r\n  }\r\n\r\n  /** @function edgeDetection()\r\n    * function to handle the player's ship passing the edge of the screen, wraps back around\r\n    */\r\n  edgeDetection() {\r\n    if(this.x <= -this.radius) {\r\n      this.x = 1000;\r\n    }\r\n    if(this.y <= -this.radius) {\r\n      this.y = 1000;\r\n    }\r\n    if(this.x >= 1000 + this.radius) {\r\n      this.x = 0;\r\n    }\r\n    if(this.y >= 1000 + this.radius) {\r\n      this.y = 0;\r\n    }\r\n  }\r\n\r\n  /** @function createParticles()\r\n    * function to handle creating the particles for the thruster trail\r\n    * @param {int} numParticles - number of particles to be created\r\n    */\r\n  createParticles(numParticles) {\r\n    //Get position of the back of the ship\r\n    let x = this.x - Math.sin(this.accel.dir) * this.radius * 1.2;\r\n    let y = this.y + Math.cos(this.accel.dir) * this.radius * 1.2;\r\n    for(let i = 0; i < numParticles; i++) {\r\n      //Create some noise on the starting position\r\n      let dx = x + Math.randomBetween(-3, 3);\r\n      let dy = y + Math.randomBetween(-3, 3);\r\n      //0.0872665 is 5 degrees in radians\r\n      let angleNoise = this.accel.dir + Math.randomBetween(-0.0872665 * 2, 0.0872665 * 2)\r\n      //Create new Particle depending on if you are boosting or not.\r\n      if(this.boosting && this.boost > 0) {\r\n        this.boostParticles.add(dx, dy, Math.PI + angleNoise, -0.05, 3.5);\r\n      }\r\n      else {\r\n        this.normalParticles.add(dx, dy, Math.PI + angleNoise, -0.05, 2.0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @Function checkPowerUps()\r\n   * Checks & adjusts the timers on all the power ups\r\n   */\r\n  checkPowerUps() {\r\n    for(let i = 1; i <= 3; i++) {\r\n      if(this.powerups[i]) {\r\n        this.powerupTimers[i]--;\r\n        this.powerUpDisplays[i].timer--;\r\n        if(this.powerupTimers[i] <= 0) {\r\n          this.powerups[i] = false;\r\n          this.powerUpDisplays[i] = '';\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @Function updateVelocity()\r\n    * Handles the updating of the velocity vector.\r\n    */\r\n  updateVelocity() {\r\n    let mag = Math.sqrt(this.speed.x * this.speed.x + this.speed.y * this.speed.y);\r\n    let angle = Math.acos(this.speed.y / mag);\r\n    if(this.speed.x < 0) {\r\n      angle *= -1;\r\n    }\r\n    if(angle < 0) {\r\n      angle += Math.tau\r\n    }\r\n    this.velocity.mag = mag;\r\n    this.velocity.dir = angle;\r\n  }\r\n\r\n  /** @function update()\r\n    * handles the updating of the ships position, reloading, boost, and the particles tied to its trail\r\n    */\r\n  update() {\r\n    this.edgeDetection();\r\n    this.x += this.speed.x;\r\n    this.y += this.speed.y;\r\n    this.updateVelocity();\r\n    this.checkPowerUps();\r\n    //Controlling the rate of fire\r\n    if(this.reloading) {\r\n      this.rateOfFire--;\r\n      if(this.rateOfFire <= 0) {\r\n        this.setRateOfFire();\r\n        this.reloading = false;\r\n      }\r\n    }\r\n\r\n    if(!this.boosting && this.boost < this.MAXBOOST) {\r\n      this.boostRecharge *= -1;\r\n      //Variable makes it so the boost only recharges every other frame.\r\n      if(this.boostRecharge === 1) {\r\n        this.boost++;\r\n        this.boostGauge.boost = this.boost;\r\n      }\r\n    }\r\n\r\n    this.boostParticles.update();\r\n    this.normalParticles.update();\r\n    this.boostGauge.update();\r\n  }\r\n\r\n  /** @Function drawShield()\r\n    * draws the shield around the ship.\r\n    */\r\n  drawShield(ctx) {\r\n    ctx.save();\r\n    let gradient = ctx.createRadialGradient(this.x, this.y, this.radius * 0.5, this.x, this.y, this.radius * 1.3);\r\n    gradient.addColorStop(0, \"black\");\r\n    gradient.addColorStop(1, \"magenta\");\r\n    ctx.fillStyle = gradient;\r\n    ctx.globalAlpha = 0.3;\r\n    ctx.beginPath();\r\n    ctx.arc(this.x, this.y, this.radius * 1.4, 0, Math.tau);\r\n    ctx.closePath();\r\n    ctx.fill();\r\n    ctx.restore();\r\n  }\r\n\r\n  /** @Function createPowerUpDisplay()\r\n    * Handles the creating of a power up timer display object.\r\n    * @param {int} type - type of power up that needs to be displayed\r\n    * @param {int} timer - amount of frames the power up is active.\r\n    */\r\n  createPowerUpDisplay(type, timer) {\r\n    if(type === 1) {\r\n      this.powerUpDisplays[type] = new PowerUpDisplay(5, 1000 * 0.40, type, timer);\r\n    }\r\n    else if(type === 2) {\r\n      this.powerUpDisplays[type]= new PowerUpDisplay(5, 1000 * 0.50, type, timer);\r\n    }\r\n    else {\r\n      this.powerUpDisplays[type] = new PowerUpDisplay(5, 1000 * 0.60, type, timer);\r\n    }\r\n  }\r\n\r\n  /** @Function updatePowerUpDisplay()\r\n    * Updates the timer on the power up displays.\r\n    * @param {int} type - which power up timer needs updated.\r\n    * @param {int} amount - amoun the timer needs to be adjusted.\r\n    */\r\n  updatePowerUpDisplay(type, amount) {\r\n    this.powerUpDisplays[type].timer += amount;\r\n  }\r\n\r\n  /** @function render()\r\n    * function to draw the ship and the particles for the thruster trail\r\n    * @param context ctx - the backBufferContext from game.js\r\n    */\r\n  render(ctx) {\r\n    //Draw the shield if need be.\r\n    if(this.powerups[3]) {\r\n      this.drawShield(ctx);\r\n    }\r\n    //Draw the power up displays if there are any.\r\n    for(let i = 1; i < 4; i ++) {\r\n      if(this.powerUpDisplays[i] !== '') {\r\n        this.powerUpDisplays[i].render(ctx);\r\n      }\r\n    }\r\n    ctx.save()\r\n    ctx.strokeStyle = this.color;\r\n    ctx.beginPath();\r\n    //Enable accurate rotation\r\n    ctx.translate(this.x, this.y);\r\n    ctx.rotate(this.accel.dir);\r\n    let adjustment = this.radius * 1.2;\r\n    //Draw ship\r\n    ctx.moveTo(0, -adjustment);\r\n    ctx.lineTo(10, adjustment);\r\n    ctx.lineTo(0, adjustment / 1.5);\r\n    ctx.lineTo(-10, adjustment);\r\n    ctx.lineTo(0, -adjustment);\r\n    ctx.stroke();\r\n    ctx.restore();\r\n\r\n    this.boostParticles.render(ctx);\r\n    this.normalParticles.render(ctx);\r\n    this.boostGauge.render(ctx);\r\n  }\r\n}\r\n","\r\n/** @class Asteroid\r\n  * Class that handles the construction and data of an Asteroid\r\n  */\r\nexport default class Asteroid {\r\n  /** @constructor\r\n    * Initializes all the properties of the asteroid\r\n    * @param {floats} x, y - position of te asteroid to be created\r\n    * @param {float} mass - mass of the asteroid, also the radius, mass to radius ratio 1:1\r\n    * @param {float} direction - direction in radians of the asteroid's speed, -1.0 if the asteroid is being created from scratch\r\n    */\r\n  constructor(x, y, mass, direction) {\r\n    //Position variables\r\n    this.x = x;\r\n    this.y = y;\r\n    //Variable to help UFOs catch & release asteroids\r\n    this.held = false;\r\n    //if somehow this gets called with a mass less than 5\r\n    if(mass < 5) {\r\n      mass = 5;\r\n    }\r\n    this.mass = mass;\r\n    this.radius = mass;\r\n    //Array to store the surface of the asteroid, so it isn't a perfect circle.\r\n    this.surfacePath = [];\r\n    this.createSurface();\r\n    //Used to determine the x & y velocities\r\n    this.direction = direction;\r\n    this.velocity = {x: 0.0, y: 0.0};\r\n    //Used to make the asteroid spin\r\n    this.angle = 0.0;\r\n    //direction is not -1 if the asteroid has exploded\r\n    if(this.direction === -1.0) {\r\n      this.initVelocity();\r\n    }\r\n    else {\r\n      this.explodedVelocity();\r\n    }\r\n  }\r\n\r\n  /** @function initVelocity()\r\n    * function to initalize the velocity of the asteroid from scratch\r\n    */\r\n  initVelocity() {\r\n    //Sets speed of the asteroids, more mass = slower\r\n    let mag = Math.randomInt(8, 10) / this.mass;\r\n    if(this.x < 0) {\r\n      this.velocity.x = Math.randomBetween(1.0, mag);\r\n    }\r\n    else if(this.x > 1000 + this.radius){\r\n      this.velocity.x = -Math.randomBetween(1.0, mag);\r\n    }\r\n    else {\r\n      this.velocity.x = Math.randomBetween(-mag, mag);\r\n    }\r\n    if(this.y < 0) {\r\n      this.velocity.y = Math.randomBetween(1.0, mag);\r\n    }\r\n    else  if(this.y > 1000 + this.radius){\r\n      this.velocity.y = -Math.randomBetween(1.0, mag);\r\n    }\r\n    else {\r\n      this.velocity.y = Math.randomBetween(-mag, mag);\r\n    }\r\n  }\r\n\r\n  /** @function createSurface()\r\n    * function to create some 'noise' on the asteroid's surface\r\n    */\r\n  createSurface() {\r\n    let segments = 24;\r\n    //15 degree increments\r\n    let angle = Math.tau / segments;\r\n    let randomRadius = this.radius;\r\n    let x;\r\n    let y;\r\n    for(let i = 0; i < segments; i++) {\r\n      if(Math.randomInt(0, 100) > 70) {\r\n        randomRadius = Math.randomBetween(this.radius * 0.80, this.radius);\r\n      }\r\n      x = Math.cos(i * angle) * randomRadius;\r\n      y = -Math.sin(i * angle) * randomRadius;\r\n      this.surfacePath.push({x: x, y: y});\r\n    }\r\n  }\r\n\r\n  /** @function explodedVelocity()\r\n    * function to initalize velocities from asteroids that have spawned from an Explosion\r\n    */\r\n  explodedVelocity() {\r\n    //Sets speed of the asteroids, more mass = slower\r\n    let mag = Math.randomInt(9, 12) / this.mass;\r\n    //Uses the direction given to ensure the asteroids leave the center of the original asteroid\r\n    this.velocity.x = Math.cos(this.direction) * mag;\r\n    this.velocity.y = -Math.sin(this.direction) * mag;\r\n  }\r\n\r\n  /** @function edgeDetection()\r\n    * function to handle the asteroid leaving the edge of the screen\r\n    */\r\n  edgeDetection() {\r\n    //Asteroids have a buffer zone outside of the screen\r\n    if(this.x >= 1000 + 2.5 * this.radius) {\r\n      this.x = -2.4 * this.radius;\r\n    }\r\n    else if(this.x <= -2.5 * this.radius) {\r\n      this.x = 1000 + 2.4 * this.radius;\r\n    }\r\n    if(this.y >= 1000 + 2.5 * this.radius) {\r\n      this.y = -2.4 * this.radius;\r\n    }\r\n    else if(this.y <= -2.5 * this.radius) {\r\n      this.y = 1000 + 2.4 * this.radius;\r\n    }\r\n  }\r\n\r\n  /** @function update()\r\n    * handles the updating of asteroids speed and position\r\n    */\r\n  update() {\r\n    //Check if it needs to wrap around\r\n    this.edgeDetection();\r\n    //Spin left or right depending on the x speed\r\n    if(this.velocity.x > 0) {\r\n      this.angle += 0.01;\r\n    }\r\n    else {\r\n      this.angle -= 0.01;\r\n    }\r\n    //Update the position\r\n    this.x += this.velocity.x;\r\n    this.y += this.velocity.y;\r\n  }\r\n\r\n  /** @function render()\r\n    * function that handles drawing the asteroids\r\n    * @param {canvas context} context - backBufferContext from game.js\r\n    */\r\n  render(context) {\r\n    context.save();\r\n    context.strokeStyle = 'white';\r\n    context.translate(this.x, this.y);\r\n    context.rotate(this.angle);\r\n    context.beginPath();\r\n    //Draw the noisy surface\r\n    context.moveTo(this.surfacePath[0].x,this.surfacePath[0].y);\r\n    for(let i = 1; i < this.surfacePath.length; i++) {\r\n      context.lineTo(this.surfacePath[i].x, this.surfacePath[i].y);\r\n    }\r\n    context.closePath();\r\n    context.stroke();\r\n    context.restore();\r\n  }\r\n}\r\n","import ParticlePool from './particlePool.js';\r\n\r\n/** @class Projectile\r\n  * Class to handle projectiles, and is the super class for the Homing object from homing.js\r\n  */\r\nexport default class Projectile {\r\n  /** @Constructor\r\n    * Initializes the projectile object.\r\n    * @param {floats} x, y - position variables.\r\n    * @param {float} direction - direction the projectile travels, in radians.\r\n    * @pram {string} color - name of the color to be displayed.\r\n    */\r\n  constructor(x, y, direction, color) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.radius = 3.5;\r\n    this.color = color;\r\n    //Make sure theh direction is position, just for simplicity\r\n    if(direction < 0) {\r\n      direction += Math.tau;\r\n    }\r\n    this.velocity = {mag: 5.0, dir: direction};\r\n    this.speed = {x: 0.0, y: 0.0};\r\n    this.initSpeed();\r\n    //Object pool for trail effect\r\n    this.particlePool = new ParticlePool(50, this.color, 1.0);\r\n  }\r\n\r\n  /** @function createParticles()\r\n    * function to handle creating the particles for trail of the projectile\r\n    * @param {int} numParticles - number of particles to be created\r\n    */\r\n  createParticles(numParticles) {\r\n    //Get the back of the projectile\r\n    let x = this.x - Math.sin(this.velocity.dir)* this.radius;\r\n    let y = this.y + Math.cos(this.velocity.dir)* this.radius;\r\n    for(let i = 0; i < numParticles; i++) {\r\n      //Spread the particles over the projectile\r\n      let dx = x + Math.randomBetween(-this.radius, this.radius);\r\n      let dy = y + Math.randomBetween(-this.radius, this.radius);\r\n      this.particlePool.add(dx, dy, Math.PI * this.velocity.dir, -0.05, 1.0)\r\n    }\r\n  }\r\n\r\n  /** @function initSpeed()\r\n    * function to handle speed initialization\r\n    */\r\n  initSpeed() {\r\n    this.speed.x = Math.sin(this.velocity.dir) * this.velocity.mag;\r\n    this.speed.y = -Math.cos(this.velocity.dir) * this.velocity.mag;\r\n  }\r\n\r\n  /** @function edgeDetection()\r\n    * function to handle edgeDetection of projectiles, projectiles are destroyed at the edge\r\n    */\r\n  edgeDetection() {\r\n    if(this.x + this.radius >= 1000 || this.x - this.radius <= 0 ||\r\n    this.y + this.radius >= 1000 || this.y - this.radius <= 0) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** @function update()\r\n    * typical update function, also updates its particle trail\r\n    * @param {ship/ships} targets - could be theh player object or the array of UFO, depending on who owns this projectile.\r\n    * Targets is only for the subclass Homing.\r\n    */\r\n  update(targets) {\r\n    this.createParticles(Math.randomInt(2, 4));\r\n    this.x += this.speed.x;\r\n    this.y += this.speed.y;\r\n    this.particlePool.update();\r\n  }\r\n\r\n  /** @function render()\r\n    * standard render function\r\n    * @param context ctx - backBufferContext from game.js\r\n    */\r\n  render(ctx) {\r\n    ctx.save();\r\n    ctx.strokeStyle = this.color;\r\n    ctx.beginPath();\r\n    ctx.arc(this.x, this.y, this.radius, 0, Math.tau);\r\n    ctx.closePath();\r\n    ctx.stroke();\r\n    ctx.restore();\r\n    this.particlePool.render(ctx);\r\n  }\r\n}\r\n","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nexport default function _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import getPrototypeOf from \"./getPrototypeOf\";\nimport superPropBase from \"./superPropBase\";\nexport default function _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}","import getPrototypeOf from \"./getPrototypeOf\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import Projectile from \"./projectile.js\"\r\n\r\n/** @Class Homing\r\n  * Homing is a subclass of Projectile. It seeks out targets rather than flying in straight lines.\r\n  * Homing objects also have line trail effect instead of a particle trail effect to distiguish them from their parent objects.\r\n  */\r\nexport default class Homing extends Projectile {\r\n  /** @Constructor\r\n    * Sets up the Homing object\r\n    * @param {floats} x, y - position variables.\r\n    * @param {floats} direction - indicates the starting direction of travel.\r\n    * @param {string} color - the color the projectile will be.\r\n    */\r\n  constructor(x, y, direction, color) {\r\n    //Call super class.\r\n    super(x, y, direction, color);\r\n    // 0.0174533 is 1 degree in radians\r\n    this.correction = 0.0174533 * 1.25;\r\n    //Initially doesn't have a target.\r\n    this.target = null;\r\n    //Stores its past to make a trail effect.\r\n    this.past = [];\r\n    //Variable to help with the trail effect.\r\n    this.width = 1;\r\n  }\r\n\r\n  /** @Function findTarget()\r\n    * Finds the closest Target\r\n    * @param {UFO} targets - will always be a array of UFOS\r\n    */\r\n  findTarget(targets) {\r\n    let shortest = 10000\r\n    for(let i = 0; i < targets.length; i++) {\r\n      let distance = 0;\r\n      //Checks if the potential tartget is already the one it has.\r\n      if(this.target !== targets[i]) {\r\n        //If not, calculate the distance to target.\r\n        distance = this.findDistance(targets[i]);\r\n      }\r\n      //If the target is closer than other targets\r\n      if(distance < shortest) {\r\n        this.target = targets[i]\r\n        shortest = distance\r\n      }\r\n    }\r\n    if(shortest === 10000) {\r\n      this.target = null\r\n    }\r\n  }\r\n\r\n  /** @Function findDistance()\r\n    * Finds the distance to the target.\r\n    * @param {Ship} target - will be a ship object, Player or UFO\r\n    */\r\n  findDistance(target) {\r\n    let dx = this.x - target.x\r\n    let dy = this.y - target.y\r\n    let distance = Math.sqrt(dx * dx + dy * dy)\r\n    return distance\r\n  }\r\n\r\n  /** @Function findDirection()\r\n    * Finds the direction to the target.\r\n    * @param {Ship} target - will be a ship object, Player or UFO\r\n    */\r\n  findDirection(target) {\r\n    let dx = this.x - target.x\r\n    let dy = this.y - target.y\r\n    let distance = Math.sqrt(dx * dx + dy * dy)\r\n    let direction = Math.acos(dy / distance)\r\n    if(dx > 0) {\r\n      direction *= -1\r\n    }\r\n    if( direction < 0) {\r\n      direction += Math.tau\r\n    }\r\n    return direction;\r\n  }\r\n\r\n  /** @Function adjustDirection()\r\n    * Adjusts the projectiles direction to track a target.\r\n    */\r\n  adjustDirection() {\r\n    //Gets a directio to the target\r\n    let direction = this.findDirection(this.target);\r\n    //Make the current travel direction positive for simplicity\r\n    if(this.velocity.dir < 0) {\r\n      this.velocity.dir += Math.tau\r\n    }\r\n    //Calculate the angle difference\r\n    let delta = this.velocity.dir - direction\r\n    //Determine to turn lect for right based on the delta.\r\n    if(delta > Math.PI) {\r\n      delta -= Math.tau\r\n    }\r\n    if(delta < -Math.PI) {\r\n      delta += Math.tau\r\n    }\r\n    //Adjust the direction as long as the Absolute value of delta > 0\r\n    if(delta > 0) {\r\n      this.velocity.dir -= this.correction;\r\n    }\r\n    if(delta < 0) {\r\n      this.velocity.dir += this.correction;\r\n    }\r\n  }\r\n\r\n  /** @Function storePast()\r\n    * Stores the past of the projectile for the trail effect.\r\n    */\r\n  storePast() {\r\n    let point = {x: this.x, y: this.y};\r\n    this.past.push(point);\r\n    if(this.past.length > 30) {\r\n      this.past.splice(0, 1);\r\n    }\r\n  }\r\n\r\n  /** @function alterPath()\r\n    * Add some noise to the path.\r\n    */\r\n  alterPast() {\r\n    this.past.forEach(point => {\r\n      point.x += Math.randomBetween(-1, 1);\r\n      point.y += Math.randomBetween(-1, 1);\r\n    });\r\n  }\r\n\r\n  /** @Function update()\r\n    * Function to update everything on a frame to frame basis.\r\n    * @param {Ship / array of Ships} targets - could be the single player ship, or the array of UFOs\r\n    */\r\n  update(targets) {\r\n    //Check if it is the player's projectile.\r\n    if(this.color === 'green') {\r\n      //Search for UFOSs\r\n      if(targets.length > 0) {\r\n        this.findTarget(targets);\r\n      }\r\n    }\r\n    else {\r\n      //Otherwise, it is a UFO projectile & it only seeks out the player.\r\n      this.target = targets;\r\n    }\r\n    //If you have a target, seek it out.\r\n    if(this.target) {\r\n      this.adjustDirection();\r\n      super.initSpeed();\r\n    }\r\n    //Store the past\r\n    this.storePast();\r\n    this.x += this.speed.x;\r\n    this.y += this.speed.y;\r\n    //Create some noise on the past.\r\n    this.alterPast();\r\n  }\r\n\r\n  /** @Function render()\r\n    * Function to render everything about the projectile.\r\n    * @param {canvas context} ctx - backBufferContext\r\n    */\r\n  render(ctx) {\r\n    super.render(ctx);\r\n    ctx.save();\r\n    ctx.strokeStyle = this.color;\r\n    ctx.lineWidth = this.width;\r\n    //Render the past\r\n    for(let i = 0; i < this.past.length - 1; i++) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(this.past[i].x, this.past[i].y);\r\n      ctx.lineTo(this.past[i + 1].x, this.past[i + 1].y);\r\n      ctx.stroke();\r\n      //Slowly increase the width of the trail.\r\n      ctx.lineWidth += 0.1;\r\n    }\r\n    ctx.restore();\r\n  }\r\n}\r\n","import Ship from './ship.js';\r\n\r\n/** @class UFO\r\n  * Class to handle the UFO, inherits from the Ship class\r\n  */\r\nexport default class UFO extends Ship {\r\n  /** @constructor\r\n    * Handles the initialization of the UFO\r\n    * @param {floats} x, y - position variables.\r\n    * Note: Right now color & type do the same thing, but I have both in case I want to change the colors of the UFOs or add new ones.\r\n    */\r\n  constructor(x, y) {\r\n    super();\r\n    //UFOs don't have boost, no need to have an object pool for them.\r\n    this.boostParticles = null;\r\n    this.x = x;\r\n    this.y = y;\r\n    //Determines the spinning of the UFO\r\n    this.rotation = 0.0;\r\n    this.accel = {mag: 0.0, dir: 0.0}\r\n    this.acceleration = 0.2;\r\n    //Reference to an asteroid if the UFO ever catches one.\r\n    this.asteroid = '';\r\n    //For visual\r\n    this.innerRadius = 10;\r\n    //For the actual size of the ship\r\n    this.radius = 25;\r\n    //For the area around the ship the UFO tries to keep empty\r\n    this.bufferRadius = 75;\r\n    //When the Ship is in critical danger\r\n    this.critical = 40;\r\n    //Color of the UFO\r\n    this.color = \"\";\r\n    //A.I. type of the UFO (tied to color)\r\n    this.type = \"\";\r\n    //Cooldown timer for pathfinding & abilities.\r\n    this.clock = 0;\r\n    //Points given to the play upon death.\r\n    this.bounty = 0;\r\n    this.setColor();\r\n    //Adjust the object pool for the UFO\r\n    this.normalParticles.color = this.color;\r\n    this.normalParticles.speed = 1.0;\r\n    this.setClock();\r\n    this.rateOfFire = 0;\r\n    this.setRateOfFire();\r\n    //For visual\r\n    this.lineSegments = [];\r\n    this.initLineSegments();\r\n    //Goal position of the UFO. UFOs do not always have one.\r\n    this.goal = '';\r\n    this.initVelocity();\r\n  }\r\n\r\n  /** @Function setColor()\r\n    * Chooses a random color & sets the variables tied to color\r\n    */\r\n  setColor() {\r\n    let color;\r\n    let random = Math.randomInt(0, 101);\r\n    //Spawn UFO and reset Timer\r\n    if(random > 90) {\r\n      //Elite UFOs can do anything other UFOs can & are more aggressive. They also give a life when they are destroyed.\r\n      color = 'fuchsia';\r\n      this.type = \"Elite\";\r\n      this.bounty = 500;\r\n    }\r\n    else if(random > 85) {\r\n      //Dodger UFOs have the fastest fire rate (behind Elite) & will attempt to dodge projectiles.\r\n      color = 'purple';\r\n      this.type = \"Dodger\";\r\n      this.bounty = 200;\r\n    }\r\n    else if (random > 45) {\r\n      //Hurler UFOs will catch smallish asteroids & throw them in the direction of the player.\r\n      color = 'blue';\r\n      this.type = \"Hurler\";\r\n      this.bounty = 150;\r\n    }\r\n    else {\r\n      //Theif UFOs will try to steal power ups that spawn from the player.\r\n      color = 'orange';\r\n      this.bounty = 100;\r\n      this.type = \"Theif\";\r\n    }\r\n    this.color = color;\r\n  }\r\n\r\n  /** @Function setClock()\r\n    * determines the clock based on the type of UFO. Mainly handles pathfinding & projectile dodging.\r\n    */\r\n  setClock() {\r\n    this.CLOCK = 0;\r\n    if(this.type === 'Dodger') {\r\n      this.CLOCK = 5;\r\n      this.clock = this.CLOCK;\r\n    }\r\n    else if(this.type === 'Elite') {\r\n      this.CLOCK = 1;\r\n      this.clock = this.CLOCK;\r\n    }\r\n    else if(this.type === 'Hurler') {\r\n      this.CLOCK = 30;\r\n      this.clock = this.CLOCK;\r\n    }\r\n    else {\r\n      this.CLOCK = 60;\r\n      this.clock = this.CLOCK;\r\n    }\r\n  }\r\n\r\n  /** @Funciton setRateOfFire()\r\n    * Handles setting the rate of fire based on the UFO type.\r\n    */\r\n  setRateOfFire() {\r\n    if(this.type === 'Dodger') {\r\n      this.rateOfFire = Math.randomInt(150, 350);\r\n    }\r\n    else if(this.type === 'Elite') {\r\n      this.rateOfFire = Math.randomInt(75, 150);\r\n    }\r\n    else if(this.type === 'Hurler') {\r\n      this.rateOfFire = Math.randomInt(300, 700);\r\n    }\r\n    else {\r\n      this.rateOfFire = Math.randomInt(300, 500);\r\n    }\r\n    //Check if the UFO has the rapid fire power up.\r\n    if(this.powerups[2]) {\r\n      this.rateOfFire = Math.round(this.rateOfFire / 2)\r\n    }\r\n  }\r\n\r\n  /** @function initLineSegments()\r\n    * handles the creation of endpoints to draw lines on the UFO\r\n    */\r\n  initLineSegments() {\r\n    let xi;\r\n    let xf;\r\n    let yi;\r\n    let yf;\r\n    // 60 degress per segment, (PI / 3)\r\n    let numSegments = 6;\r\n    for(let i = 0; i < numSegments; i++) {\r\n      //Calculate various sin and cos values\r\n      let cos = Math.cos(i * Math.PI / 3);\r\n      let sin = Math.sin(i * Math.PI / 3);\r\n      //Set x values based on cos * radius values\r\n      xi = cos * this.innerRadius;\r\n      xf = cos * this.radius;\r\n      //Set y values based on - sin * radius values\r\n      yi = -sin * this.innerRadius;\r\n      yf = -sin * this.radius;\r\n      this.lineSegments.push({xI: xi, xF: xf, yI: yi, yF: yf});\r\n    }\r\n  }\r\n\r\n  /** @function initVelocity()\r\n    * Handles the initial Goal of the UFO to get on screen.\r\n    */\r\n  initVelocity() {\r\n    this.goal = {x: Math.randomBetween(200, 800), y: Math.randomBetween(200, 800)};\r\n  }\r\n\r\n  /** @Function updateSpeed()\r\n    * Handles the updating of speed of the UFO & enforces the speed limit.\r\n    */\r\n  updateSpeed() {\r\n    //Adjust based on the acceleration vector.\r\n    this.speed.y += -Math.cos(this.accel.dir) * this.accel.mag;\r\n    this.speed.x += Math.sin(this.accel.dir) * this.accel.mag;\r\n    //Enforce the max x speed\r\n    if(Math.abs(this.speed.x) >= 1.5) {\r\n      if(this.speed.x < 0) {\r\n        this.speed.x = -1.5;\r\n      }\r\n      else {\r\n        this.speed.x = 1.5;\r\n      }\r\n    }\r\n    //Enfore the max y speed\r\n    if(Math.abs(this.speed.y) >= 1.5) {\r\n      if(this.speed.y < 0) {\r\n        this.speed.y = -1.5;\r\n      }\r\n      else {\r\n        this.speed.y = 1.5;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @function edgeDetection()\r\n    * Handles what the UFO does when it gets close to the edge of the screen. UFOs like to stay on screen once they get there.\r\n    * Side note - UFO is much more vulnerable to asteroids off screen, cannot shoot to protect itself (though it will try) and asteroids switching sides may instantly destory it\r\n    */\r\n  edgeDetection() {\r\n    if((this.x + this.bufferRadius >= 1000 && this.speed.x > 0) || (this.x - this.bufferRadius <= 0 && this.speed.x < 0)) {\r\n      this.speed.x *= -1\r\n      this.accel.dir += Math.PI / 2\r\n      this.accel.mag = 0.0\r\n    }\r\n    if((this.y + this.bufferRadius >= 1000 && this.speed.y > 0) || (this.y - this.bufferRadius <= 0 && this.speed.y < 0)) {\r\n      this.speed.y *= -1\r\n      this.accel.dir += Math.PI / 2\r\n      this.accel.mag = 0.0\r\n    }\r\n  }\r\n\r\n  /** @Function goToGoal()\r\n    * Handles how a UFO approaches its goal position.\r\n    * Note: Unlike the player, the UFO can go in what ever direciton it likes immediately, but it still has to accelerate in that direction.\r\n    */\r\n  goToGoal() {\r\n    let distance = Math.getDistance(this.x, this.y, this.goal.x, this.goal.y);\r\n    this.accel.dir = Math.getDir(distance, this.x, this.y, this.goal.x, this.goal.y);\r\n    this.accel.mag = this.acceleration;\r\n    //If it is less than its radius away from its goal, it has made it.\r\n    if(distance < this.radius) {\r\n      this.goal = '';\r\n    }\r\n  }\r\n\r\n  /** @Function alterPath()\r\n    * Handles how the UFO dodges asteroids.\r\n    * @param {float} direction - direction the UFO needs to try to go.\r\n    * Note: If the UFO has a goal while dodging an asteroid, it must wait on its clock to start going towards its goal again.\r\n    * This is to prevent, UFOs from just trying to slam them selves into asteroids, give different UFOs seemingly different behaviors, &\r\n    * given the player potentially a better chance of beating the UFO to the power up.\r\n    */\r\n  alterPath(direction) {\r\n    this.accel.mag = this.acceleration;\r\n    this.accel.dir = direction;\r\n    if(this.goal !== '') {\r\n      //This is so it doesn't get pushed to zero by dodging a lot\r\n      this.setClock();\r\n      this.clock--;\r\n    }\r\n  }\r\n\r\n  /** @Function catchAsteroid()\r\n    * Handles how the UFO manipulates an asteroid when trying to catch it.\r\n    * @param {asteroid} asteroid - Reference to the asteroid the UFO is trying to catch.\r\n    * Note: When asteroids are held, they are treated as being 5 times more massive than they actually are.\r\n    * This is to prevent asterods from overlapping when held asteroids collide with other asteroids.\r\n    */\r\n  catchAsteroid(asteroid) {\r\n    //Make sure the UFO has a reference to its new Asteroid\r\n    this.asteroid = asteroid\r\n    //Make sure the Asteroid knows it is being held\r\n    this.asteroid.held = true;\r\n    //Lock the speed of the Asteroid with the speed of the UFO.\r\n    this.asteroid.velocity.x = this.speed.x;\r\n    this.asteroid.velocity.y = this.speed.y;\r\n  }\r\n\r\n  /** @Function orbitAsteroid()\r\n    * Handles making the held asteroid orbit the UFO.\r\n    */\r\n  orbitAsteroid() {\r\n    //Get the Distance the Asteroid is from the UFO\r\n    let distance = Math.getDistance(this.x, this.y, this.asteroid.x, this.asteroid.y);\r\n    //Get the direction fro the UFO to the Asteroid.\r\n    let direction = Math.getDir(distance, this.x, this.y, this.asteroid.x, this.asteroid.y);\r\n    //How much the UFO wants to spin the Asteroid\r\n    let delta = 0.02;\r\n    //Calculate where the new position of the asteroid needs to be.\r\n    let x = this.x + Math.sin(direction + delta) * distance;\r\n    let y = this.y - Math.cos(direction + delta) * distance;\r\n    //Update the position.\r\n    this.asteroid.x = x;\r\n    this.asteroid.y = y;\r\n  }\r\n\r\n  /** @Function checkAsteroidAlignment()\r\n    * Handles how the UFO lines up the Asteroid held with the player.\r\n    * @param {Ship} player - reference to the player.\r\n    */\r\n  checkAsteroidAlignment(player) {\r\n    //Direction of the UFO to the Asteroid.\r\n    let direction = Math.getDirection(this.x, this.y, this.asteroid.x, this.asteroid.y);\r\n    //Direction of the UFO to the Player.\r\n    let aim = Math.getDirection(this.x, this.y, player.x, player.y);\r\n    //Calculate how much the angles are off by\r\n    let error = direction - aim;\r\n    //If it is only off by 5 degrees throw the asteroid\r\n    if(Math.abs(error) < 5 * Math.PI / 180) {\r\n      //How fast the asteroid is thrown is based on the mass of the asteroid.\r\n      let magnitude = 30 / this.asteroid.mass;\r\n      /* Why the hell is this here?\r\n      this.speed.y += -Math.cos(this.accel.dir) * this.accel.mag;\r\n      this.speed.x += Math.sin(this.accel.dir) * this.accel.mag;*/\r\n      //update the velocity of theh asteroid\r\n      this.asteroid.velocity.x = Math.sin(direction) * magnitude;\r\n      this.asteroid.velocity.y = -Math.cos(direction) * magnitude\r\n      //Make sure it knows it isn't held any more.\r\n      this.asteroid.held = false;\r\n      //Get rid of the reference.\r\n      this.asteroid = '';\r\n    }\r\n  }\r\n\r\n  /** @function createParticles()\r\n    * function to handle creating the particles for the thruster trail\r\n    * @param int numParticles - number of particles to be created\r\n    */\r\n  createParticles(numParticles) {\r\n    for(let i = 0; i < numParticles; i++) {\r\n      let angle = this.velocity.dir + Math.randomBetween(-Math.PI, 0);\r\n      let x = this.x - Math.cos(angle) * this.radius;\r\n      let y = this.y + Math.sin(angle) * this.radius;\r\n      //Create new Particle\r\n      this.normalParticles.add(x, y, this.velocity.dir + Math.PI, -0.05, 3.0);\r\n      //this.particles.push(new Particle(x, y, Math.PI + this.velocity.dir, 0.70 * this.velocity.mag, this.color, 30, true));\r\n    }\r\n  }\r\n\r\n  /** @Function asteroidParticles()\r\n    * Handles the creation of particles for held asteroids.\r\n    * @param {int} numParticles - number of particles that need to be created.\r\n    */\r\n  asteroidParticles(numParticles) {\r\n    let x = this.asteroid.x;\r\n    let y = this.asteroid.y;\r\n    for(let i = 0; i < numParticles; i++) {\r\n      let angle = Math.randomBetween(0, Math.tau);\r\n      //Get a point on the asteroid's surface\r\n      let dx = x + Math.cos(angle) * this.asteroid.radius;\r\n      let dy = y - Math.sin(angle) * this.asteroid.radius;\r\n\r\n      this.normalParticles.add(dx, dy, angle, -0.05, 3.0);\r\n    }\r\n  }\r\n\r\n  /** @Function checkPowerUps()\r\n    * Handles updating the power ups that the UFO has active.\r\n    */\r\n  checkPowerUps() {\r\n    for(let i = 1; i <= 3; i++) {\r\n      if(this.powerups[i]) {\r\n        this.powerupTimers[i]--;\r\n        if(this.powerupTimers[i] <= 0) {\r\n          this.powerups[i] = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @function update()\r\n    * Updates everything that needs to be changed on a frame by frame basis.\r\n    */\r\n  update() {\r\n    this.edgeDetection();\r\n    this.updateSpeed();\r\n    this.checkPowerUps();\r\n    super.updateVelocity();\r\n\r\n    //Update clock\r\n    if(this.clock < this.CLOCK) {\r\n      this.clock--;\r\n      if(this.clock <= 0) {\r\n        this.setClock();\r\n      }\r\n    }\r\n    //Slow down path finding\r\n    if(this.clock === this.CLOCK && this.goal !== '') {\r\n      this.goToGoal();\r\n    }\r\n    //Controlling the rate of fire\r\n    if(this.reloading) {\r\n      this.rateOfFire--;\r\n      if(this.rateOfFire <= 0) {\r\n        this.setRateOfFire()\r\n        this.reloading = false;\r\n      }\r\n    }\r\n    //Rotation the UFO visually\r\n    if(this.speed.x > 0) {\r\n      this.rotation += 0.01;\r\n    }\r\n    else {\r\n      this.rotation -= 0.01;\r\n    }\r\n    //Check if it has a held asteroid\r\n    if(this.asteroid !== '') {\r\n      let dist = Math.getDistance(this.x, this.y, this.asteroid.x, this.asteroid.y);\r\n      //Make sure it is still withint range & not destroyed\r\n      if(!this.asteroid.held || dist > this.bufferRadius + this.asteroid.radius) {\r\n        this.asteroid.held = false;\r\n        this.asteroid = '';\r\n      }\r\n      else {\r\n        //Orbit the asteroid & create a particle effect.\r\n        this.asteroid.velocity.x = this.speed.x;\r\n        this.asteroid.velocity.y = this.speed.y;\r\n        this.orbitAsteroid();\r\n        this.asteroidParticles(1);\r\n      }\r\n    }\r\n    //Update the position\r\n    this.x += this.speed.x;\r\n    this.y += this.speed.y;\r\n    //Create particles for the particle trail\r\n    if(Math.random() > 0.50) {\r\n      this.createParticles(1);\r\n    }\r\n    //Update object pool\r\n    this.normalParticles.update();\r\n  }\r\n\r\n /** @function render()\r\n  * standard render function\r\n  */\r\n  render(ctx) {\r\n    ctx.save();\r\n    ctx.strokeStyle = this.color;\r\n    ctx.translate(this.x, this.y);\r\n    ctx.rotate(this.rotation);\r\n    ctx.beginPath();\r\n    ctx.arc(0, 0, this.innerRadius, 0, Math.tau);\r\n    ctx.closePath();\r\n    ctx.stroke();\r\n    ctx.beginPath();\r\n    ctx.arc(0, 0, this.radius, 0, Math.tau);\r\n    ctx.closePath();\r\n    ctx.stroke();\r\n    this.lineSegments.forEach(segment => {\r\n      ctx.beginPath();\r\n      ctx.moveTo(segment.xI, segment.yI);\r\n      ctx.lineTo(segment.xF, segment.yF);\r\n      ctx.stroke();\r\n    });\r\n    ctx.restore();\r\n    //Render particles\r\n    this.normalParticles.render(ctx);\r\n    //Draw the shield if need be.\r\n    if(this.powerups[3]) {\r\n      super.drawShield(ctx);\r\n    }\r\n  }\r\n}\r\n","\r\n/** @Class PowerUp\r\n\t*\tObject to keep track of power up information.\r\n\t*/\r\nexport default class PowerUp {\r\n\t/** @Constructor\r\n\t\t* Handles the initialization of a power up object.\r\n\t\t* @param {floats} x, y - position variables\r\n\t\t* @param {int} type - type theh power up needs to be, can only be 1 = Homing, 2 = Rapid Fire, 3 = Shield\r\n\t\t*/\r\n\tconstructor(x, y, type) {\r\n\t\tthis.pos = {x: x, y: y};\r\n\t\tthis.type = type\r\n\t\tthis.radius = 10;\r\n\t\tthis.color = '';\r\n\t\tthis.timer = 0;\r\n\t\t//Detemines the shape of the power up\r\n\t\tthis.lineSegments = []\r\n\t\tthis.initPowerUp();\r\n\t}\r\n\r\n\t/** @Function initPowerUp\r\n\t\t* Handles the initialization of the power ups' specific variables.\r\n\t\t*/\r\n\tinitPowerUp() {\r\n\t\tswitch (this.type){\r\n\t\t\t\t//Homing\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\t//16.6 seconds at 60 fps\r\n\t\t\t\t\tthis.timer = 1000;\r\n\t\t\t\t\tthis.color = 'red';\r\n\t\t\t\t\tthis.initLineSegments();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//Rapid Fire\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\t//20 seconds at 60 fps\r\n\t\t\t\t\tthis.timer = 1200;\r\n\t\t\t\t\tthis.color = 'green';\r\n\t\t\t\t\tthis.initRapidLineSegments();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//Shield\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\t//45 seconds at 60 fps\r\n\t\t\t\t\tthis.timer = 2700;\r\n\t\t\t\t\tthis.color = 'magenta';\r\n\t\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t}\r\n\r\n\t/** @Function initRapidLineSegments()\r\n\t\t* Handles the filling of the line Segments array for the shape of the rapid fire power up.\r\n\t\t*/\r\n\tinitRapidLineSegments() {\r\n\t\tlet xi, xf, yi, yf;\r\n\t\tlet angle1 = 3 * Math.PI / 4;\r\n\t\tlet angle2 = Math.PI / 3;\r\n\t\tlet angle3 = 4 * Math.PI / 3;\r\n\t\txi = -Math.cos(angle1) * this.radius * 0.8;\r\n\t\txf = Math.cos(angle1) * this.radius * 0.8;\r\n\t\tyi = -Math.sin(angle1) * this.radius * 0.8;\r\n\t\tyf = Math.sin(angle1) * this.radius * 0.8;\r\n\t\tthis.lineSegments.push({xI: xi, xF: xf, yI: yi, yF: yf});\r\n\t\txi = -Math.cos(angle2) * this.radius * 0.9;\r\n\t\txf = Math.cos(angle1) * this.radius * 0.7;\r\n\t\tyi = -Math.sin(angle2) * this.radius * 0.9;\r\n\t\tyf = Math.sin(angle1) * this.radius * 0.7;\r\n\t\tthis.lineSegments.push({xI: xi, xF: xf, yI: yi, yF: yf});\r\n\t\txi = -Math.cos(angle3) * this.radius * 0.9;\r\n\t\txf = Math.cos(angle1) * this.radius * 0.7;\r\n\t\tyi = -Math.sin(angle3) * this.radius * 0.9;\r\n\t\tyf = Math.sin(angle1) * this.radius * 0.7;\r\n\t\tthis.lineSegments.push({xI: xi, xF: xf, yI: yi, yF: yf});\r\n\t}\r\n\r\n\t/** @Function initLineSegments()\r\n\t\t* Handles theh initialization of theh line segments array for the homing projectile.\r\n\t\t*/\r\n\tinitLineSegments() {\r\n\t\tlet xi;\r\n\t\tlet xf;\r\n\t\tlet yi;\r\n\t\tlet yf;\r\n\t\tlet numSegments = 2;\r\n\t\tfor(let i = 0; i < numSegments; i++) {\r\n\t\t\t//Calculate various sin and cos values\r\n\t\t\tlet cos = Math.cos(i * Math.PI / 2);\r\n\t\t\tlet sin = Math.sin(i * Math.PI / 2);\r\n\t\t\t//Set x values based on cos * radius values\r\n\t\t\txi = cos * this.radius;\r\n\t\t\txf = -cos * this.radius;\r\n\t\t\t//Set y values based on - sin * radius values\r\n\t\t\tyi = -sin * this.radius;\r\n\t\t\tyf = sin * this.radius;\r\n\t\t\tthis.lineSegments.push({xI: xi, xF: xf, yI: yi, yF: yf});\r\n\t\t}\r\n\t}\r\n\r\n/** @function render()\r\n * standard render function\r\n */\r\n render(ctx) {\r\n   ctx.save();\r\n   ctx.strokeStyle = this.color;\r\n   ctx.translate(this.pos.x, this.pos.y);\r\n   ctx.beginPath();\r\n   ctx.arc(0, 0, this.radius, 0, Math.tau);\r\n   ctx.closePath();\r\n   ctx.stroke();\r\n\t ctx.beginPath();\r\n\t ctx.rect(-this.radius * 1.30, -this.radius * 1.30, this.radius * 2.60, this.radius * 2.60)\r\n\t ctx.closePath();\r\n\t ctx.stroke();\r\n   this.lineSegments.forEach(segment => {\r\n     ctx.beginPath();\r\n     ctx.moveTo(segment.xI, segment.yI);\r\n     ctx.lineTo(segment.xF, segment.yF);\r\n     ctx.stroke();\r\n   });\r\n   ctx.restore();\r\n }\r\n}\r\n","\r\n/** @Class PopUp\r\n  * Object to handle text that pops up, giving the player information.\r\n  */\r\nexport default class PopUp {\r\n  /** @Constructor\r\n    * Initializes the Pop up object & key variables.\r\n    * @param {floats} x, y - position variables.\r\n    * @param {string} string - what needs to be displayed\r\n    * @param {string} type - helps set certai variables for different types of pop ups.\r\n    */\r\n  constructor(x, y, string, type) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.type = type;\r\n    this.string = '';\r\n    //How long the pop up will laster (int)\r\n    this.life = 0;\r\n    //Size of the font used to display the text. (int)\r\n    this.size = 0;\r\n    this.initSettings(string);\r\n    this.color = 'yellow';\r\n  }\r\n\r\n  /** @Function initSettings()\r\n    * Handles the setting up of variables that depend on the type of pop up.\r\n    * @param {string} string - information that needs to be displayed.\r\n    */\r\n  initSettings(string) {\r\n    switch (this.type) {\r\n      //Short lived pop ups.\r\n      case \"blip\":\r\n        this.life = 40;\r\n        this.size = 25;\r\n        this.string = '+ ' + string;\r\n        break;\r\n      //Longer lived, more important pop ups.\r\n      case \"annoucement\":\r\n        //Respawning pop up is set to 300 to match the actual respawn timer.\r\n        if(string === 'RESPAWNING') {\r\n          this.life = 300;\r\n        }\r\n        else {\r\n          this.life = 120;\r\n        }\r\n        this.size = 50;\r\n        this.string = string;\r\n        break;\r\n      default:\r\n\r\n    }\r\n  }\r\n\r\n  /** @Function update()\r\n    * Handles the decrementing of the pop ups life. When it returns true, the pop up needs to be removed.\r\n    */\r\n  update() {\r\n    this.life--;\r\n    if(this.life <= 0) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /** @Function render()\r\n    * Handles the drawing of the pop up to the screen.\r\n    * @param {Canvas Context} ctx - backBufferContext\r\n    */\r\n  render(ctx) {\r\n    ctx.save();\r\n    ctx.fillStyle = this.color;\r\n    ctx.font = this.size + \"px Arial\";\r\n    ctx.fillText(this.string, this.x, this.y);\r\n    ctx.restore();\r\n  }\r\n}\r\n","/** @Class HUDObject\r\n  * Object to hold information about some essential variables and display them to the player.\r\n  */\r\nexport default class HUDObject {\r\n  /** @Constructor\r\n    * Initializes the key variables\r\n    * @param {floats/ints} x, y - position variables\r\n    * @param {string} type - the name of the variable displayed\r\n    * @param {int} information - value held by each variable.\r\n    */\r\n  constructor(x, y, type, information) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.type = type;\r\n    this.info = information;\r\n  }\r\n\r\n  /** @Functon Render()\r\n    * Draws the HUDObject to the screen\r\n    * @param {Canvas Context} ctx - backBufferContext\r\n    */\r\n  render(ctx) {\r\n    ctx.save();\r\n    ctx.fillStyle = 'yellow';\r\n    ctx.font = \"30px Arial\";\r\n    ctx.globalAlpha = 0.70;\r\n    ctx.fillText(this.type + this.info, this.x, this.y);\r\n    ctx.restore();\r\n  }\r\n}\r\n","\r\nimport Ship from './ship.js';\r\nimport Asteroid from './asteroid.js';\r\nimport Projectile from './projectile.js';\r\nimport Homing from './homing.js';\r\nimport ParticlePool from './particlePool.js';\r\nimport UFO from './ufo.js';\r\nimport PowerUp from './powerup.js';\r\nimport PopUp from './popups.js';\r\nimport HUDObject from './hud.js';\r\nimport './math.js';\r\n\r\n/** @class Game\r\n  * Game object that controls the interactions between all other Objects\r\n  */\r\nexport default class Game {\r\n  /** @constructor\r\n    * Game object constructor\r\n    * @param {Menu} menu - menu object itself\r\n    */\r\n  constructor(menu) {\r\n    //Size of the screen.\r\n    this.screenSide = menu.screenWidth;\r\n    //Allows the game to interact better with the menu.\r\n    this.menu = menu;\r\n    //Constants\r\n    this.MAXUFO = 5;\r\n    this.MAXASTEROIDS = 6;\r\n    this.UFOTIME = 500;\r\n    this.POWERTIME = 900;\r\n    //Initial asteroids\r\n    this.numAsteroids = 3;\r\n    //Player\r\n    this.ship = new Ship();\r\n    //Array of UFO objects\r\n    this.ufos = [];\r\n    //Number of UFOs destroyed to progress the levels\r\n    this.kills = 0;\r\n    //Variables to control ufo spawn\r\n    this.ufoTimer = Math.randomInt(this.UFOTIME, this.UFOTIME * 2);\r\n    //Vars to help with respawning the player\r\n    this.respawning = false;\r\n    this.respawnTimer = 300;\r\n    //Array of projectile objects\r\n    this.projectiles = [];\r\n    //Array of asteroid objects\r\n    this.asteroids = [];\r\n    this.createAsteroids();\r\n    //Array of particle object pools\r\n    this.particles = [];\r\n    this.initParticlePools();\r\n    //HUD Variables\r\n    this.score = 0;\r\n    this.lives = 3;\r\n    this.level = 1;\r\n    //Array of popup objects that help with giving information to the player.\r\n    this.popups = [];\r\n    //Objects to display variables\r\n    this.hudObjects = {score: '', lives: '', level: ''};\r\n    this.initHUD();\r\n    //Make sure there are never fewer than the inital amount of asteroids\r\n    this.constAsteroids = this.level * this.numAsteroids;\r\n    //controls the teleport function\r\n    this.teleports = 10;\r\n    this.coolingDown = 50;\r\n    //Array of power up objects.\r\n    this.powerups = [];\r\n    //Variable to determine the spawning of power ups.\r\n    this.powerupTimer = Math.randomInt(this.POWERTIME, this.POWERTIME * 3);\r\n    //Variables to help with game state managing.\r\n    this.gameOver = false;\r\n    this.paused = false;\r\n\r\n    this.audioController = menu.audioController;\r\n\r\n    //Input Map\r\n    this.keyMap = {13: false, 32: false, 37: false, 38: false, 39: false, 65: false, 68: false, 70: false, 87: false, 88: false};\r\n\r\n    this.backBufferContext = menu.backBufferContext;\r\n    this.backBufferCanvas = menu.backBufferCanvas;\r\n    this.screenBufferContext = menu.screenBufferContext;\r\n\r\n    //Binders\r\n    this.loop = this.loop.bind(this);\r\n    this.handleKeyDown = this.handleKeyDown.bind(this);\r\n    this.handleKeyUp = this.handleKeyUp.bind(this);\r\n    window.onkeydown = this.handleKeyDown;\r\n    window.onkeyup = this.handleKeyUp;\r\n\r\n    //60 fps\r\n    this.interval = setInterval(this.loop, 50/3);\r\n  }\r\n\r\n  /** @function masterReset()\r\n    * This function handles the reset of all the major variables.\r\n    */\r\n  masterReset() {\r\n    this.ship = new Ship();\r\n    this.ufos = [];\r\n    this.ufoTimer = Math.randomInt(this.UFOTIME, this.UFOTIME * 2);\r\n    this.powerups = [];\r\n    this.powerupTimer = Math.randomInt(this.POWERTIME, this.POWERTIME * 3);\r\n    this.respawning = false;\r\n    this.respawnTimer = 300;\r\n    this.projectiles = [];\r\n    this.asteroids = [];\r\n    this.numAsteroids = 3;\r\n    this.createAsteroids();\r\n    this.particles = [];\r\n    this.initParticlePools();\r\n    this.score = 0;\r\n    this.lives = 3;\r\n    this.level = 1;\r\n    this.constAsteroids = this.level * this.numAsteroids;\r\n    this.teleports = 10;\r\n    this.coolingDown = 50;\r\n    this.popups = [];\r\n    this.hudObjects = {score: '', lives: '', level: ''};\r\n    this.initHUD();\r\n    this.gameOver = false;\r\n    this.paused = false;\r\n  }\r\n\r\n  /** @Function initParticlePools()\r\n    * establishes all the particle object pools for the explosion particle effects.\r\n    */\r\n  initParticlePools() {\r\n    let speed = 5.0;\r\n    let max = 140;\r\n    //Need a object pool for each color of particles.\r\n    this.particles.push(new ParticlePool(max, 'green', speed));\r\n    this.particles.push(new ParticlePool(max, 'white', speed));\r\n    this.particles.push(new ParticlePool(max, 'blue', speed));\r\n    this.particles.push(new ParticlePool(max, 'red', speed));\r\n    this.particles.push(new ParticlePool(max, 'fuchsia', speed));\r\n    this.particles.push(new ParticlePool(max, 'orange', speed));\r\n    this.particles.push(new ParticlePool(max, 'purple', speed));\r\n  }\r\n\r\n  /** @function handleKeyDown()\r\n    * function to handle key presses\r\n    */\r\n  handleKeyDown(event) {\r\n    event.preventDefault();\r\n    //P or Escape\r\n    if(event.keyCode === 80 || event.keyCode === 27) {\r\n      this.paused = true;\r\n      this.menu.gameState = 'paused';\r\n      this.menu.buttonNames[0] = 'resume';\r\n      this.menu.buttonNames[1] = 'restart';\r\n      this.menu.buttonNames[2] = 'mute';\r\n      this.menu.drawPauseMenu();\r\n    }\r\n    if(this.menu.gameState !== 'game') {\r\n      return;\r\n    }\r\n    //Update the keyMap\r\n    this.keyMap[event.keyCode] = true;\r\n  }\r\n\r\n  /** @function\r\n    * function to handle the keys being lifted up\r\n    */\r\n  handleKeyUp(event) {\r\n    event.preventDefault();\r\n    //Update the key map\r\n    this.keyMap[event.keyCode] = false;\r\n  }\r\n\r\n  /** @Function initHUD()\r\n    * Function to initalize hudObjects\r\n    */\r\n  initHUD() {\r\n    this.hudObjects.score = new HUDObject(this.screenSide * 0.45, this.screenSide * 0.05, 'Score: ', this.score);\r\n    this.hudObjects.lives = new HUDObject(this.screenSide * 0.03, this.screenSide * 0.97, 'Lives: ', this.lives);\r\n    this.hudObjects.level = new HUDObject(this.screenSide * 0.87, this.screenSide * 0.97, 'Level: ', this.level);\r\n  }\r\n\r\n  /** @function\r\n    * function to create a Projectile from the player's ship\r\n    */\r\n  createProjectile() {\r\n    //Get the coordinates of the tip of the ship, The 1.2 is so you can't run into your own shot immediately\r\n    let x = this.ship.x + Math.sin(this.ship.accel.dir)* this.ship.radius * 1.3;\r\n    let y = this.ship.y - Math.cos(this.ship.accel.dir)* this.ship.radius * 1.3;\r\n    //Check if the ship has the homing power up\r\n    if(this.ship.powerups[1]) {\r\n      this.projectiles.push(new Homing(x, y, this.ship.accel.dir, this.ship.color));\r\n      this.audioController.trigger('homing');\r\n    }\r\n    else {\r\n      this.projectiles.push(new Projectile(x, y, this.ship.accel.dir, this.ship.color));\r\n      this.audioController.trigger('shoot');\r\n    }\r\n    this.ship.reloading = true;\r\n  }\r\n\r\n  /** @function\r\n    * function to handle UFO projectiles\r\n    * @param float tx - is the x position of the target\r\n    * @param float ty - is the y position of the target\r\n    */\r\n  ufoProjectile(ufo, tx, ty) {\r\n    let direction = Math.getDirection(ufo.x, ufo.y, tx, ty);\r\n    //Again, 1.2 is so the ufo doesn't immediately destory itself when it shoots\r\n    let x = ufo.x + Math.sin(direction)* ufo.radius * 1.2;\r\n    let y = ufo.y - Math.cos(direction)* ufo.radius * 1.2;\r\n    //Check if the UFO has the homing power up.\r\n    if(ufo.powerups[1]) {\r\n      this.projectiles.push(new Homing(x, y, direction, ufo.color));\r\n      this.audioController.trigger('homing');\r\n    }\r\n    else {\r\n      this.projectiles.push(new Projectile(x, y, direction, ufo.color));\r\n      this.audioController.trigger('shoot');\r\n    }\r\n    ufo.reloading = true;\r\n  }\r\n\r\n  /** @function\r\n    * function to create as many asteroids as needed\r\n    */\r\n  createAsteroids() {\r\n    while(this.asteroids.length < this.numAsteroids) {\r\n      this.addAsteroid(-1.0);\r\n    }\r\n  }\r\n\r\n  /** @function addAsteroid()\r\n    * Function to add new asteroid to the list while making sure it is not spawned where a object already is\r\n    * @param float direction - determines the inital direction of the asteroid if it has exploded, -1.0 if spawning in otherwise\r\n    */\r\n  addAsteroid(direction) {\r\n    //Variables to establish the particle\r\n    let x;\r\n    let y;\r\n    let radius;\r\n    let mass;\r\n    //Var to control the while loop\r\n    let currLength = this.asteroids.length;\r\n    //Loop that generates random values for the asteroid and makes sure the space is not already occupied\r\n    while (currLength === this.asteroids.length) {\r\n      //Var to determine if it would have spawned inside something\r\n      var collision = false;\r\n      //Pick one side screen\r\n      let spawnSide = Math.randomInt(1, 5);\r\n      mass = Math.randomBetween(10, 75);\r\n      radius = mass;\r\n      //Top\r\n      if(spawnSide === 1) {\r\n        x = Math.randomBetween(-2 * radius, this.screenSide + 2 * radius);\r\n        y = - 2 * radius;\r\n      }\r\n      //Right\r\n      else if(spawnSide === 2) {\r\n        x = this.screenSide + 2 * radius;\r\n        y = Math.randomBetween(-2 * radius, this.screenSide + 2 * radius);\r\n      }\r\n      //Bottom\r\n      else if(spawnSide === 3) {\r\n        x = Math.randomBetween(-2 * radius, this.screenSide + 2 * radius);\r\n        y = this.screenSide + 2 * radius;\r\n      }\r\n      //Left\r\n      else {\r\n        x = - 2 * radius;\r\n        y = Math.randomBetween(-2 * radius, this.screenSide + 2 * radius);\r\n      }\r\n      //Checks if the position is occupied by another asteroid\r\n      for(let i = 0; i < currLength; i++) {\r\n        let asteroid = this.asteroids[i];\r\n        if(Math.circleCollisionDetection(asteroid.x, asteroid.y, asteroid.radius, x, y, radius)) {\r\n          collision = true;\r\n        }\r\n      }\r\n      if(!collision) {\r\n        this.asteroids.push(new Asteroid(x, y, mass, direction));\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @Function addUFO()\r\n  * Function to spawn new UFOs\r\n  */\r\n  addUFO() {\r\n    let x;\r\n    let y;\r\n    let radius = 25;\r\n    let currLength = this.ufos.length;\r\n\r\n    while(currLength === this.ufos.length) {\r\n      let collision = false;\r\n      let spawnSide = Math.randomInt(1, 5);\r\n      //Top\r\n      if(spawnSide === 1) {\r\n        x = Math.randomBetween(-2 * radius, 1000 + 2 * radius);\r\n        y = - 2 * radius;\r\n      }\r\n      //Right\r\n      else if(spawnSide === 2) {\r\n        x = 1000 + 2 * radius;\r\n        y = Math.randomBetween(-2 * radius, 1000 + 2 * radius);\r\n      }\r\n      //Bottom\r\n      else if(spawnSide === 3) {\r\n        x = Math.randomBetween(-2 * radius, 1000 + 2 * radius);\r\n        y = 1000 + 2 * radius;\r\n      }\r\n      //Left\r\n      else {\r\n        x = - 2 * radius;\r\n        y = Math.randomBetween(-2 * radius, 1000 + 2 * radius);\r\n      }\r\n      //Make sure the UFO doesn't spawn inside an Asteroid\r\n      for(let i = 0; i < currLength; i++) {\r\n        let asteroid = this.asteroids[i];\r\n        if(Math.circleCollisionDetection(x, y, radius + 40, asteroid.x, asteroid.y, asteroid.radius)) {\r\n          collision = true;\r\n        }\r\n      }\r\n      //If the place is clear, add an asteroid.\r\n      if(!collision) {\r\n        this.ufos.push(new UFO(x, y));\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @Function createPowerUp()\r\n  * Function to create new power ups.\r\n  */\r\n  createPowerUp() {\r\n    //Random Posistion\r\n    let x = Math.randomInt(this.screenSide * 0.10, this.screenSide * 0.90)\r\n    let y = Math.randomInt(this.screenSide * 0.10, this.screenSide * 0.90)\r\n    let random = Math.random();\r\n    //Pick a randomd power up type\r\n    if(random > 0.66) {\r\n      //Homing power up\r\n      this.powerups.push(new PowerUp(x, y, 1));\r\n    }\r\n    else if (random > 0.33) {\r\n      //Rapid Shot power up\r\n      this.powerups.push(new PowerUp(x, y, 2));\r\n    }\r\n    else {\r\n      //Shield power\r\n      this.powerups.push(new PowerUp(x, y, 3));\r\n    }\r\n  }\r\n\r\n  /** @function rotate()\r\n    * Function to change the velocities to make the collisions act like 1-dimensional collisions\r\n    * @param velocity is the x and y velocities of the asteroid\r\n    * @param float angle is the offset needed to adjust for\r\n    * @returns vector of rotated velocities\r\n    */\r\n  rotate(velocity, angle) {\r\n    const rotatedVelocities = {\r\n        x: velocity.x * Math.cos(angle) - velocity.y * Math.sin(angle),\r\n        y: velocity.x * Math.sin(angle) + velocity.y * Math.cos(angle)\r\n    };\r\n    return rotatedVelocities;\r\n  }\r\n\r\n  /** @function particleCollision()\r\n    * Function to handle asteroid to asteroid collisions (treated like elastic particle collisions), I ripped this out of one my side projects\r\n    * @param asteroid is the first asteroid in question\r\n    * @param asteroid otherAsteroid is the other particle in question\r\n    * Note: Held asteroids caused some problems with this. Some asteroids were clipping through eachother.\r\n    * Solution: Held asteroids are treated as more massive to knock other asteroids out of the way.\r\n    */\r\n  particleCollision(asteroid, otherAsteroid) {\r\n    //Vars to determine the differences in velocities\r\n    let xVelocityDiff = asteroid.velocity.x - otherAsteroid.velocity.x;\r\n    let yVelocityDiff = asteroid.velocity.y - otherAsteroid.velocity.y;\r\n    //Vars to determine the distances between asteroids\r\n    let xDist = otherAsteroid.x - asteroid.x;\r\n    let yDist = otherAsteroid.y - asteroid.y;\r\n\r\n    // Prevent accidental overlap of asteroids\r\n    if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {\r\n\r\n        // Grab angle between the two colliding asteroids\r\n        let angle = -Math.atan2(otherAsteroid.y - asteroid.y, otherAsteroid.x - asteroid.x);\r\n\r\n        // Store mass in var for better readability in collision equation\r\n        let m1 = 0;\r\n        let m2 = 0;\r\n        //If UFOs are holding the asteroid, treat them as if they were more massive\r\n        if(asteroid.held === true) {\r\n          m1 = asteroid.mass * 5;\r\n        }\r\n        else {\r\n          m1 = asteroid.mass;\r\n        }\r\n        //Must check both asteroids\r\n        if(otherAsteroid.held === true) {\r\n          m2 = otherAsteroid.mass * 5;\r\n        }\r\n        else {\r\n          m2 = otherAsteroid.mass;\r\n        }\r\n\r\n        // Velocity before equation\r\n        let u1 = this.rotate(asteroid.velocity, angle);\r\n        let u2 = this.rotate(otherAsteroid.velocity, angle);\r\n\r\n        // Velocity after 1d collision equation\r\n        let v1 = { x: (u1.x * (m1 - m2) + 2 * m2 * u2.x) / (m1 + m2), y: u1.y };\r\n        let v2 = { x: (u2.x * (m2 - m1) + 2 * m1 * u1.x)/ (m1 + m2), y: u2.y };\r\n\r\n        // Final velocity after rotating axis back to original location\r\n        let vFinal1 = this.rotate(v1, -angle);\r\n        let vFinal2 = this.rotate(v2, -angle);\r\n\r\n        // Swap asteroid velocities for realistic bounce effect\r\n        asteroid.velocity.x = vFinal1.x;\r\n        asteroid.velocity.y = vFinal1.y;\r\n        otherAsteroid.velocity.x = vFinal2.x;\r\n        otherAsteroid.velocity.y = vFinal2.y;\r\n    }\r\n  }\r\n\r\n  /** @Function projectileDodger()\r\n  * Function to handle UFO projectile dodging.\r\n  */\r\n  projectileDodger(ufo, projectile) {\r\n    let distance = Math.getDistance(ufo.x, ufo.y, projectile.x, projectile.y);\r\n    //Check if the distance between UFO & projectile is less than 2 * the buffer radius\r\n    if(distance < (ufo.bufferRadius * 2 + projectile.radius)) {\r\n      //Direction from Projectile to UFO\r\n      let direction = Math.getDir(distance, projectile.x, projectile.y, ufo.x, ufo.y);\r\n      //Move directly away from the projectile\r\n      ufo.alterPath(direction);\r\n      //This is to make sure the the UFO can't constanly dodge\r\n      ufo.setClock();\r\n      ufo.clock--;\r\n    }\r\n    if(distance < (ufo.radius + projectile.radius)) {\r\n      //There is a collision\r\n      return true;\r\n    }\r\n    //No Collision?\r\n    return false;\r\n  }\r\n\r\n  /** @Function updateScore()\r\n  * Function to handle updating the score.\r\n  */\r\n  updateScore(amount) {\r\n    this.score += amount;\r\n    this.hudObjects.score.info = this.score;\r\n  }\r\n\r\n  /** @function handleAsteriodExplosion()\r\n    * function to handles asteroids exploding from a projectile\r\n    * @param int aID - index of the asteroid to be exploded\r\n    */\r\n  handleAsteriodExplosion(aID) {\r\n    //Save the essentials\r\n    let asteroid = this.asteroids[aID];\r\n    let mass = asteroid.mass;\r\n    let x = asteroid.x;\r\n    let y = asteroid.y;\r\n    //Make sure the asteroid is let go.\r\n    asteroid.held = false;\r\n    //Get rid of the asteroid\r\n    this.asteroids.splice(aID, 1);\r\n    this.audioController.trigger('explosion');\r\n    //Smaller asteroids are harder to hit, thus more score\r\n    let points = Math.floor(100 / mass);\r\n    //Score blip\r\n    this.popups.push(new PopUp(x, y, points, 'blip'));\r\n    this.updateScore(points);\r\n    //If it isn't too small\r\n    if(mass >= 15) {\r\n      //random number of pieces the asteroid will break into\r\n      let random = Math.randomInt(2, 4);\r\n      //Update asteroid count\r\n      this.numAsteroids += random - 1;\r\n      mass /= random;\r\n      //Random direction\r\n      let direction = Math.randomBetween(0, Math.tau);\r\n      //Uniform distribution\r\n      let angleChange = Math.tau / random;\r\n      for(let i = 0; i < random; i++) {\r\n        //Since mass is also the radius, use it to get a starting position for new the asteroids\r\n        let newX = x + Math.cos(direction) * mass;\r\n        let newY = y - Math.sin(direction) * mass;\r\n        //Create new asteroid\r\n        this.asteroids.push(new Asteroid(newX, newY, mass, direction));\r\n        direction += angleChange;\r\n      }\r\n    }\r\n    else {\r\n      //If the asteroi is too small to break into pieces, just update the number of asteroids.\r\n      this.numAsteroids--;\r\n    }\r\n  }\r\n\r\n  /** @function detectShipCrash()\r\n    * determines if a ufo hits an asteroid and determines AI\r\n    * @param Ship ship - must be a ufo\r\n    * @param Asteroid asteroid - asteroid object\r\n    */\r\n  detectShipCrash(ship, asteroid) {\r\n    let dx = ship.x - asteroid.x;\r\n    let dy = ship.y - asteroid.y;\r\n    let distance = dx * dx + dy * dy;\r\n    if(distance < (asteroid.radius + ship.radius) * (asteroid.radius + ship.radius)) {\r\n      //There was a crash\r\n      return true;\r\n    }\r\n    //Check if the ship is holding the asteroid.\r\n    if(ship.asteroid === asteroid) {\r\n      //Ignore held asteroids.\r\n      return;\r\n    }\r\n    //Check distance against bufferRadius\r\n    if(distance < (ship.bufferRadius + asteroid.radius) * (ship.bufferRadius + asteroid.radius)) {\r\n      //Get direction from asteroid to the UFO\r\n      let direction = Math.getDir(distance, asteroid.x, asteroid.y, ship.x, ship.y);\r\n      //Move away from it.\r\n      ship.alterPath(direction);\r\n      //Check UFO type, Asteroid size, & if UFO already has an asteroid.\r\n      if((ship.type === 'Hurler' || ship.type === 'Elite') && asteroid.radius < ship.critical && ship.asteroid === '') {\r\n        //Catch the asteroid\r\n        ship.catchAsteroid(asteroid);\r\n      }\r\n      //Check if UFO is on the verge of crashing\r\n      else if (distance < Math.pow(ship.critical + asteroid.radius, 2)) {\r\n        //Deploy Counter Measures!!\r\n        if(!ship.reloading) {\r\n          //Shoot the asteroid\r\n          this.ufoProjectile(ship, asteroid.x, asteroid.y);\r\n        }\r\n      }\r\n    }\r\n    //UFO & asteroid are too far apart to do anything.\r\n    return false;\r\n  }\r\n\r\n  /** @function explode()\r\n    * function to create explosion particle effects\r\n    * @param {floats} x, y - position of explosion\r\n    * @param {string} color - determines the color of particles to be created\r\n    */\r\n  explode(x, y, color) {\r\n    let numParticles = Math.randomInt(30, 70);\r\n    let dir = Math.randomBetween(0, Math.tau);\r\n    let index = 0;\r\n    //Determine the correct particle object pool by color\r\n    for(let j = 0; j < this.particles.length; j++) {\r\n      if(this.particles[j].color === color) {\r\n        index = j;\r\n        break;\r\n      }\r\n    }\r\n    for(let i = 0; i < numParticles; i ++) {\r\n      //Generate a new direction some times\r\n      if(Math.random() > 0.4) {\r\n        dir = Math.randomBetween(0, Math.tau);\r\n      }\r\n      //Add the new particle to the pool\r\n      this.particles[index].add(x, y, Math.PI + dir, -0.05, 3.5)\r\n    }\r\n  }\r\n\r\n  /** @function teleport()\r\n    * function to handle the teleport extra credit\r\n    * Checks if the area is clear before chosing a spot\r\n    */\r\n  teleport() {\r\n    //Random position\r\n    let x = Math.randomBetween(100, 900);\r\n    let y = Math.randomBetween(100, 900);\r\n    //So you don't spawn right next to something and immediately die\r\n    let buffer = 50;\r\n    let collision = false;\r\n    let len = 0;;\r\n    //Loop until you find something, potentially opens the door for infinite loop, but extremely unlikely with the small buffer, and everything is constantly moving\r\n    do {\r\n      if(collision) {\r\n        x = Math.randomBetween(100, 900);\r\n        y = Math.randomBetween(100, 900);\r\n        collision = false;\r\n      }\r\n      //Checks if the ufo is nearby\r\n      len = this.ufos.length;\r\n      for(let i = 0; i < len; i++) {\r\n        let ufo = this.ufos[i];\r\n        if(Math.circleCollisionDetection(x, y, this.ship.radius, ufo.x, ufo.y, ufo.radius + 2 * buffer)) {\r\n          collision = true;\r\n        }\r\n      }\r\n      len = this.asteroids.length;\r\n      for(let i = 0; i < len; i++) {\r\n        let asteroid = this.asteroids[i];\r\n        //Check if new space is free of asteroids\r\n        if(Math.circleCollisionDetection(x, y, this.ship.radius, asteroid.x, asteroid.y, asteroid.radius + buffer)) {\r\n          collision = true;\r\n        }\r\n      }\r\n      len = this.projectiles.length;\r\n      for(let i = 0; i < len; i++) {\r\n        let projectile = this.projectiles[i];\r\n        //Check if the new space if free of projectiles\r\n        if(Math.circleCollisionDetection(projectile.x, projectile.y, projectile.radius, x, y, this.ship.radius + buffer)) {\r\n          collision = true;\r\n        }\r\n      }\r\n    } while(collision);\r\n    //Particle explosion in the to & from spots\r\n    this.explode(this.ship.x, this.ship.y, this.ship.color);\r\n    this.explode(x, y, this.ship.color);\r\n    this.audioController.trigger('teleport');\r\n    this.ship.x = x;\r\n    this.ship.y = y;\r\n    //Resets you ships momentum, Reseting the momentum is definitely easier for the player\r\n    this.ship.speed.x = 0.0;\r\n    this.ship.speed.y = 0.0;\r\n  }\r\n\r\n  /** @function respawn()\r\n    * function to handle the player's ship getting destroyed\r\n    */\r\n  respawn() {\r\n    this.respawning = true;\r\n    //New pop up to tell the player they are respawning\r\n    this.popups.push(new PopUp(350, 400, \"RESPAWNING\", 'annoucement'));\r\n    this.lives--;\r\n    //Update HUD object that handles lives\r\n    this.hudObjects.lives.info = this.lives;\r\n    if(this.lives >= 0) {\r\n      this.ship = new Ship();\r\n    }\r\n    else {\r\n      //Out of lives, it is game over.\r\n      this.gameOver = true;\r\n      //Adjust the gameState\r\n      this.menu.gameState = 'gameOver';\r\n      //Reuse the Button objects & change their names.\r\n      this.menu.buttonNames[1] = 'restart';\r\n      this.menu.buttonNames[2] = 'mute';\r\n      this.audioController.trigger('game over');\r\n      this.audioController.stopTheme();\r\n      this.audioController.playMenu();\r\n    }\r\n  }\r\n\r\n  /** @function destoryUFO()\r\n    * Handles the ufo getting destroyed.\r\n    * @param {int} ufoID - index for the UFOs array to select the proper UFO.\r\n    */\r\n  destoryUFO(ufoID) {\r\n    let ufo = this.ufos[ufoID];\r\n    this.updateScore(ufo.bounty);\r\n    //Score Blip\r\n    this.popups.push(new PopUp(ufo.x, ufo.y, ufo.bounty, 'blip'));\r\n    //If it has an asteroid, make sure the asteroid knows it isn't held anymore.\r\n    if(ufo.asteroid !== '') {\r\n      ufo.asteroid.held = false;\r\n    }\r\n    //If it is an Elite UFO you get a life.\r\n    if(ufo.bounty === 500) {\r\n      this.lives++;\r\n      //Update HUD object\r\n      this.hudObjects.lives.info = this.lives;\r\n      this.createBlip(\"1 life\");\r\n    }\r\n    this.kills++;\r\n    //Get rid of the UFO\r\n    this.ufos.splice(ufoID, 1);\r\n    this.audioController.trigger('ship explosion');\r\n  }\r\n\r\n  /** @Function createPowerUpBlip()\r\n    * Helper function to determine the type of pop up to display\r\n    * @param {int} type - the type of power up picked up.\r\n    */\r\n  createPowerUpBlip(type) {\r\n    let string = '';\r\n    //Check the type of power up.\r\n    switch (type) {\r\n      case 1:\r\n        string = \"Homing Lasers\";\r\n        break;\r\n      case 2:\r\n        string = \"Rapid Fire\";\r\n        break;\r\n      case 3:\r\n        string = \"Force Field\";\r\n        break;\r\n      default:\r\n\r\n    }\r\n    //Create a pop up for this power up pick up.\r\n    this.createBlip(string);\r\n  }\r\n\r\n  /** @Function\r\n    * Function to create pop ups of type blips, which are just short pop ups.\r\n    * @param {string} string - the message that will be displayed in the pop up.\r\n    */\r\n  createBlip(string) {\r\n    let random = Math.randomInt(20, 50);\r\n    //Determine if the pop up will be above or below the ship based on Y position.\r\n    if(this.ship.y > 500) {\r\n      this.popups.push(new PopUp(this.ship.x, this.ship.y - random, string, \"blip\"));\r\n    }\r\n    else {\r\n      this.popups.push(new PopUp(this.ship.x, this.ship.y + random, string, \"blip\"));\r\n    }\r\n  }\r\n\r\n  /** @Function projectileHit()\r\n    * Handles whether or not the ship in question should be destroyed or not.\r\n    * @param {Ship} ship - Ship object, could be UFO or Player ship\r\n    * @param {int} projectileID - index for the projectiles array\r\n    */\r\n  projectileHit(ship, projectileID) {\r\n    let projectile = this.projectiles[projectileID];\r\n    let destoryed = false;\r\n    //Check if shield power ups is active.\r\n    if(ship.powerups[3]) {\r\n      this.explode(ship.x, ship.y, 'fuchsia');\r\n      this.audioController.trigger('shield broken');\r\n      ship.powerupTimers[3] = 0;\r\n      //Ship doesn't get destroyed if it has a shield\r\n      destoryed = false;\r\n    }\r\n    else {\r\n      this.explode(ship.x, ship.y, ship.color);\r\n      this.audioController.trigger('ship explosion');\r\n      //Ship does get destoyed if it doesn't have a shield.\r\n      destoryed = true;\r\n    }\r\n    //Delete the projectile regardless & explode it.\r\n    this.explode(projectile.x, projectile.y, projectile.color);\r\n    this.projectiles.splice(projectileID, 1);\r\n    return destoryed;\r\n  }\r\n\r\n  /** @Functiono pickUpPowerUp()\r\n    * Handles updating the ship that collided with a power up.\r\n    * @param {Ship} ship - ship object, could be player or UFO\r\n    * @param {PowerUp} powerUP - PowerUp object\r\n    */\r\n  pickUpPowerUp(ship, powerUp) {\r\n    //Set the power up type to true\r\n    ship.powerups[powerUp.type] = true;\r\n    //Update the timer.\r\n    ship.powerupTimers[powerUp.type] += powerUp.timer;\r\n    //If the power up type is rapid fire, immediately update the rate of fire.\r\n    if(powerUp.type === 2) {\r\n      ship.reloading = false;\r\n      ship.setRateOfFire();\r\n    }\r\n  }\r\n\r\n  /** @function update()\r\n    * Handles updating all object and variables, comments laced throughout\r\n    * Note: len is used throughout the function in hopes of reducing garbage collection. Also preventing .length properties from being executed multiple times\r\n    * through loops when possible.\r\n    */\r\n  update() {\r\n    //Update PopUps\r\n    for(let i = 0; i < this.popups.length; i++) {\r\n      if(this.popups[i].update()) {\r\n        //Update returns true if the life of the pop ups is 0 or less.\r\n        this.popups.splice(i, 1);\r\n      }\r\n    }\r\n    //Update Ship\r\n    this.ship.update();\r\n\r\n    let len = this.ufos.length;\r\n    for(let i = 0; i < len; i++) {\r\n      let ufo = this.ufos[i];\r\n      //Check type of UFO & if it already has a goal destination\r\n      if((ufo.type === 'Theif' || ufo.type === 'Elite') && ufo.goal === '') {\r\n        //Check if there are any power ups.\r\n        if(this.powerups.length > 0) {\r\n          let random = Math.randomInt(0, this.powerups.length - 1)\r\n          //Assign the position of a power up to the UFOs goal destination.\r\n          ufo.goal = {x: this.powerups[random].pos.x, y: this.powerups[random].pos.y}\r\n        }\r\n      }\r\n      ufo.update();\r\n\r\n      //Check if UFO has an asteroid & the player is not respawning\r\n      if(ufo.asteroid !== '' && !this.respawning) {\r\n        //Check to see if UFO can throw the asteroid at the player.\r\n        ufo.checkAsteroidAlignment(this.ship);\r\n      }\r\n    }\r\n\r\n    //If number of asteroids is getting low, add an asteroid.\r\n    if(this.asteroids.length < this.constAsteroids) {\r\n      this.addAsteroid(-1.0);\r\n      this.numAsteroids++;\r\n    }\r\n\r\n    //Update each asteroid\r\n    len = this.asteroids.length;\r\n    for(let i = 0; i < len; i++) {\r\n      this.asteroids[i].update();\r\n    }\r\n\r\n    //Level is based off of UFO kills. (Level ^ 2) / 2 + 1 is the current growth rate. Works pretty well after the first 3 levels.\r\n    if(this.kills !== 0 && this.kills % (Math.ceil(this.level * this.level / 2) + 1) === 0) {\r\n      this.level++;\r\n      //Update the HUD Object for level.\r\n      this.hudObjects.level.info = this.level;\r\n      this.popups.push(new PopUp(450, 500, \"Level \" + this.level, 'annoucement'));\r\n      this.lives++;\r\n      //Update HUD object for lives\r\n      this.hudObjects.lives.info = this.lives;\r\n      this.createBlip(\"1 Life\");\r\n      this.teleports += this.level;\r\n      //Initial asteroids for each level increases\r\n      let initAsteroids = 3 + this.level;\r\n      //Enforce the max of initial asteroids.\r\n      if(initAsteroids > this.MAXASTEROIDS) {\r\n        initAsteroids = this.MAXASTEROIDS;\r\n      }\r\n      let difference = initAsteroids - this.asteroids.length;\r\n      if(this.asteroids.length < initAsteroids) {\r\n        //Create asteroids to make up the difference for the new level.\r\n        for(let i = 0; i < difference; i++) {\r\n          this.addAsteroid(-1.0);\r\n          this.numAsteroids++;\r\n        }\r\n      }\r\n      //Update the variable that makes sure there are always a minimum number of asterods.\r\n      this.constAsteroids = 3 + this.level;\r\n      if(this.constAsteroids > this.MAXASTEROIDS) {\r\n        this.constAsteroids = this.MAXASTEROIDS;\r\n      }\r\n    }\r\n\r\n    //Determine UFO spawning\r\n    if(this.ufoTimer > 0 && this.ufos.length < this.MAXUFO) {\r\n      this.ufoTimer--;\r\n      if(this.ufoTimer <= 0) {\r\n        this.addUFO();\r\n        //Level scaling. As the level goes up, the faster UFOs spawn.\r\n        let scaling = (this.ufos.length / this.level);\r\n        this.ufoTimer = Math.randomInt(this.UFOTIME * scaling, this.UFOTIME * 2 * scaling);\r\n      }\r\n    }\r\n\r\n    this.powerupTimer--;\r\n    if(this.powerupTimer <= 0) {\r\n      this.createPowerUp();\r\n      //Level scaling. Similar to UFO scaling, but slower. Take much longer for power ups to spawn quickly.\r\n      let ratio = (this.powerups.length * 2 / this.level)\r\n      this.powerupTimer = Math.randomInt(this.POWERTIME * ratio, this.POWERTIME * 2 * ratio)\r\n    }\r\n\r\n    //Control respawning\r\n    if(this.respawning) {\r\n      this.respawnTimer--;\r\n      if(this.respawnTimer <= 0) {\r\n        //Done respawning, ship can now be destroyed again\r\n        this.respawnTimer = 300;\r\n        this.respawning = false;\r\n      }\r\n    }\r\n\r\n    //Checks for collisions between asteroids\r\n    len = this.asteroids.length;\r\n    for(let i = 0; i < len; i++) {\r\n      for(let j = i + 1; j < len; j++) {\r\n        let asteroid = this.asteroids[i];\r\n        let otherAsteroid = this.asteroids[j];\r\n        //Check if there is a collision.\r\n        if(Math.circleCollisionDetection(asteroid.x, asteroid.y, asteroid.radius, otherAsteroid.x, otherAsteroid.y, otherAsteroid.radius)) {\r\n          //Call function responsible for the math behind the collisions.\r\n          this.particleCollision(asteroid, otherAsteroid);\r\n          this.audioController.trigger('collision');\r\n        }\r\n      }\r\n    }\r\n\r\n    //Checks for collisions between projectiles and asteroids\r\n    for(let i = 0; i < this.projectiles.length; i++) {\r\n      for(let j = 0; j < this.asteroids.length; j++) {\r\n        let projectile = this.projectiles[i];\r\n        let asteroid = this.asteroids[j];\r\n        //Check if there is a collision.\r\n        if(Math.circleCollisionDetection(projectile.x, projectile.y, projectile.radius, asteroid.x, asteroid.y, asteroid.radius)) {\r\n          //Explode the projectile & get rid of it.\r\n          this.explode(projectile.x, projectile.y, projectile.color);\r\n          this.projectiles.splice(i, 1);\r\n          //Explode the Asteroid & attempt to break it.\r\n          this.explode(asteroid.x, asteroid.y, 'white');\r\n          this.handleAsteriodExplosion(j);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    //Make sure the player isn't respawning\r\n    if(!this.respawning) {\r\n      //Check for player crashing\r\n      len = this.asteroids.length;\r\n      for(let i = 0; i < len; i++) {\r\n        let asteroid = this.asteroids[i];\r\n        //Check for collision.\r\n        if(Math.circleCollisionDetection(this.ship.x, this.ship.y, this.ship.radius, asteroid.x, asteroid.y, asteroid.radius)) {\r\n          //Check if shield power up is active & the asteroid is small enough.\r\n          if(this.ship.powerups[3] && asteroid.mass < 15) {\r\n            //Shield protects player from asteroid & destorys asteroid.\r\n            this.explode(asteroid.x, asteroid.y, 'white');\r\n            this.handleAsteriodExplosion(i);\r\n            break;\r\n          }\r\n          else {\r\n            //Player is killed by asteroid.\r\n            this.explode(this.ship.x, this.ship.y, this.ship.color);\r\n            this.audioController.trigger('ship explosion');\r\n            this.respawn();\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    //Check if a ship or UFO picks up a powerup\r\n    len = this.ufos.length;\r\n    for(let i = 0; i < this.powerups.length; i++) {\r\n      let powerUp = this.powerups[i];\r\n      //Check for collision\r\n      if(Math.circleCollisionDetection(this.ship.x, this.ship.y, this.ship.radius, powerUp.pos.x, powerUp.pos.y, powerUp.radius)) {\r\n        this.explode(this.ship.x, this.ship.y, this.ship.color);\r\n        //check if the player already has the power up or not & update the displays correctly.\r\n        if(this.ship.powerupTimers[powerUp.type] > 0) {\r\n          this.ship.updatePowerUpDisplay(powerUp.type, powerUp.timer);\r\n        }\r\n        else {\r\n          this.ship.createPowerUpDisplay(powerUp.type, powerUp.timer);\r\n        }\r\n        this.pickUpPowerUp(this.ship, powerUp);\r\n\r\n        //Create power up blip on pick up.\r\n        this.createPowerUpBlip(powerUp.type);\r\n        //Play sound & get rid of the power up.\r\n        this.audioController.trigger('homing pickup');\r\n        this.powerups.splice(i, 1);\r\n        break;\r\n      }\r\n      for(let j = 0; j < len; j++) {\r\n        let ufo = this.ufos[j];\r\n        //Check for collision.\r\n        if(Math.circleCollisionDetection(ufo.x, ufo.y, ufo.radius, powerUp.pos.x, powerUp.pos.y, powerUp.radius)) {\r\n          this.explode(ufo.x, ufo.y, ufo.color);\r\n          this.pickUpPowerUp(ufo, powerUp);\r\n          //Play sound & get rid of power up\r\n          this.audioController.trigger('homing pickup');\r\n          this.powerups.splice(i, 1);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    len = this.asteroids.length;\r\n    //Check if a asteroid runs over a power up\r\n    for(let i = 0; i < this.powerups.length; i++) {\r\n      for(let k = 0; k < len; k++) {\r\n        let powerUp = this.powerups[i];\r\n        let asteroid = this.asteroids[k];\r\n        //Check for a collision\r\n        if(Math.circleCollisionDetection(asteroid.x, asteroid.y, asteroid.radius, powerUp.pos.x, powerUp.pos.y, powerUp.radius)) {\r\n          //Destroy the power up.\r\n          this.explode(powerUp.pos.x, powerUp.pos.y, powerUp.color);\r\n          this.powerups.splice(i, 1);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    //Check UFOs against Asteroids\r\n    for(let i = 0; i < this.ufos.length; i++) {\r\n      for(let j = 0; j < this.asteroids.length; j++) {\r\n        let ufo = this.ufos[i];\r\n        let asteroid = this.asteroids[j];\r\n        //Determine ship & asteroid interactions. Returns true if they collide with each other.\r\n        if(this.detectShipCrash(ufo, asteroid)) {\r\n          //If UFO has a shield & the asteroid is small enough, the asteroid is destoryed.\r\n          if(ufo.powerups[3] && asteroid.mass < 15) {\r\n            this.explode(asteroid.x, asteroid.y, 'white');\r\n            this.handleAsteriodExplosion(j);\r\n          }\r\n          else {\r\n            //Else destory the UFO.\r\n            this.explode(ufo.x, ufo.y, ufo.color);\r\n            this.destoryUFO(i);\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    len = this.ufos.length;\r\n    if(len > 0) {\r\n      //Check the UFOs against themselves & the player.\r\n      for(let i = 0; i < len; i++) {\r\n        let ufo1 = this.ufos[i];\r\n        //If there is more than one UFO in play\r\n        if(len > 1) {\r\n          for(let j = i + 1; j < len; j++) {\r\n            let ufo2 = this.ufos[j];\r\n            //Check for critical thresholds\r\n            if(Math.circleCollisionDetection(ufo1.x, ufo1.y, ufo1.critical, ufo2.x, ufo2.y, ufo2.critical)) {\r\n              //Check type & if reloading. Some UFOs will shoot others to save themselves.\r\n              if((ufo1.type === 'Dodger' || ufo1.type === 'Elite') && !ufo1.reloading) {\r\n                this.ufoProjectile(ufo1, ufo2.x, ufo2.y);\r\n              }\r\n              if((ufo2.type === 'Dodger' || ufo2.type === 'Elite') && !ufo2.reloading) {\r\n                this.ufoProjectile(ufo2, ufo1.x, ufo1.y);\r\n              }\r\n              //Get the direction from the first ufo to the second.\r\n              let dir = Math.getDirection(ufo1.x, ufo1.y, ufo2.x, ufo2.y)\r\n              //Point the direction the other way\r\n              ufo1.alterPath(dir + Math.PI);\r\n              //From the second ufo's perspective, this is pointing away from ufo 1\r\n              ufo2.alterPath(dir);\r\n            }\r\n          }\r\n        }\r\n        //Make sure the Player is not respawning.\r\n        if(!this.respawning) {\r\n          //Check for collision\r\n          if(Math.circleCollisionDetection(this.ship.x, this.ship.y, this.ship.radius, ufo1.x, ufo1.y, ufo1.radius)) {\r\n            //Destroy the player.\r\n            this.explode(this.ship.x, this.ship.y, this.ship.color);\r\n            this.audioController.trigger('ship explosion');\r\n            this.respawn();\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    //Projectile & Ship collisions (UFOs & Player)\r\n    for(let i = 0; i < this.projectiles.length; i++) {\r\n      let projectile = this.projectiles[i];\r\n      //Check for collision & if respawning\r\n      if(!this.respawning && Math.circleCollisionDetection(projectile.x, projectile.y, projectile.radius,\r\n        this.ship.x, this.ship.y, this.ship.radius)) {\r\n        //Check if the projectile kills the player or not.\r\n        if(this.projectileHit(this.ship, i)) {\r\n          this.respawn();\r\n        }\r\n        break;\r\n      }\r\n\r\n      //Check the UFOs\r\n      for(let j = 0; j < this.ufos.length; j ++) {\r\n        let ufo = this.ufos[j];\r\n        //Check UFO type & that the cooldown of its dodge is off.\r\n        if((ufo.type === 'Dodger' || ufo.type === 'Elite') && ufo.clock === ufo.CLOCK) {\r\n          //Attempt to dodge the projectile\r\n          if(this.projectileDodger(ufo, projectile)) {\r\n            //Check if the projectile kills the UFO\r\n            if(this.projectileHit(ufo, i)) {\r\n              this.destoryUFO(j);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        else if (Math.circleCollisionDetection(projectile.x, projectile.y, projectile.radius,\r\n          ufo.x, ufo.y, ufo.radius)) {\r\n            if(this.projectileHit(ufo, i)) {\r\n              this.destoryUFO(j);\r\n            }\r\n            break;\r\n        }\r\n      }\r\n    }\r\n\r\n    //Input Map Applying\r\n    //A or Left Arrow - Spin left (counter-clockwise)\r\n    if(this.keyMap[65] || this.keyMap[37]) {\r\n      this.ship.accel.dir -= 0.07;\r\n      if(this.ship.accel.dir <= -Math.tau) {\r\n        this.ship.accel.dir += Math.tau;\r\n      }\r\n    }\r\n    //D or Right Arrow - Spin right (clockwise)\r\n    if(this.keyMap[68] || this.keyMap[39]) {\r\n      this.ship.accel.dir += 0.07;\r\n      if(this.ship.accel.dir >= Math.tau) {\r\n        this.ship.accel.dir -= Math.tau;\r\n      }\r\n    }\r\n    if((this.respawnTimer <= 150 || !this.respawning)) {\r\n      this.ship.boosting = false;\r\n      //Enter - constrols the boosting of the player\r\n      if(this.keyMap[13] && this.ship.boost >= 0) {\r\n        this.ship.boosting = true;\r\n        this.ship.boost--;\r\n        this.ship.boostGauge.boost = this.ship.boost;\r\n        this.ship.updateSpeed(this.ship.accel.mag * 3);\r\n        let numParticles = Math.randomInt(3, 6);\r\n        this.ship.createParticles(numParticles);\r\n      }\r\n      //W or Up Arrow - Main thruster\r\n      else if ((this.keyMap[87] || this.keyMap[38])) {\r\n        this.ship.updateSpeed(this.ship.accel.mag);\r\n        let numParticles = Math.randomInt(1, 4);\r\n        this.ship.createParticles(numParticles);\r\n      }\r\n    }\r\n    //Space - Shooting\r\n    if(this.keyMap[32] && !this.ship.reloading && !this.respawning) {\r\n      this.createProjectile();\r\n    }\r\n    //F - Teleporting\r\n    if(this.keyMap[70] && this.teleports > 0 && !this.respawning && this.coolingDown === 50) {\r\n      this.teleport();\r\n      this.teleports--;\r\n      this.coolingDown--;\r\n    }\r\n    //UFOs won't shoot while player is respawning\r\n    if(!this.respawning) {\r\n      len = this.ufos.length;\r\n      for(let i = 0; i < len; i++) {\r\n        let ufo = this.ufos[i];\r\n        ufo.rateOfFire--;\r\n        if(ufo.rateOfFire <= 0) {\r\n          //Shoot at the player\r\n          this.ufoProjectile(ufo, this.ship.x, this.ship.y);\r\n          //Reset Shooting cooldown\r\n          ufo.setRateOfFire();\r\n        }\r\n      }\r\n    }\r\n\r\n    //Control Teleport/Prevent multiple from a single button Press\r\n    if(this.coolingDown < 50) {\r\n      this.coolingDown--;\r\n      if(this.coolingDown <= 0) {\r\n        this.coolingDown = 50;\r\n      }\r\n    }\r\n\r\n    //Update projectiles, if there are any\r\n    for(let i = 0; i < this.projectiles.length; i++) {\r\n      let projectile = this.projectiles[i];\r\n      //Passes targets to projectiles in case they are homing projectiles.\r\n      if(projectile.color === 'green') {\r\n        //Player projectiles will only seek out UFOs\r\n        projectile.update(this.ufos);\r\n      }\r\n      else {\r\n        //UFO projectiles will only seek out the player.\r\n        projectile.update(this.ship);\r\n      }\r\n      //Delete Off-screen projectiles\r\n      if(projectile.edgeDetection()) {\r\n        this.projectiles.splice(i, 1);\r\n      }\r\n    }\r\n\r\n    //update particles\r\n    for(let j = 0; j < this.particles.length; j++) {\r\n      this.particles[j].update();\r\n    }\r\n  }\r\n\r\n  /** @function render()\r\n    * standard render function, refreshes the screen, calls all other render functions for objects, &\r\n    * bit blits the back buffer onto the screen.\r\n    */\r\n  render() {\r\n    //Initial Setup\r\n    this.backBufferContext.fillStyle = 'black';\r\n    this.backBufferContext.strokeStyle = 'blue';\r\n    this.backBufferContext.font = '50px Times New Roman';\r\n    //Refresh canvas\r\n    this.backBufferContext.fillRect(0,0, this.screenSide, this.screenSide);\r\n\r\n    let len = this.ufos.length;\r\n    //Draw UFOs\r\n    for(let i = 0; i < len; i++) {\r\n      this.ufos[i].render(this.backBufferContext);\r\n    }\r\n    //Draw ship\r\n    if(!this.respawning || this.respawnTimer <= 150) {\r\n      this.ship.render(this.backBufferContext);\r\n    }\r\n    len = this.asteroids.length;\r\n    //Draw asteroids\r\n    for(let i = 0; i < len; i++) {\r\n      this.asteroids[i].render(this.backBufferContext);\r\n    }\r\n    len = this.projectiles.length;\r\n    //Draw projectiles\r\n    for(let i = 0; i < len; i++) {\r\n      this.projectiles[i].render(this.backBufferContext);\r\n    }\r\n\r\n    //Draw PowerUps\r\n    len = this.powerups.length;\r\n    for(let i = 0; i < len; i++) {\r\n      this.powerups[i].render(this.backBufferContext);\r\n    }\r\n\r\n    //Draw Paricles\r\n    len = this.particles.length;\r\n    for(let i = 0; i < len; i++) {\r\n      this.particles[i].render(this.backBufferContext);\r\n    }\r\n\r\n    //Draw PopUps\r\n    len = this.popups.length;\r\n    for(let i = 0; i < len; i++) {\r\n      this.popups[i].render(this.backBufferContext);\r\n    }\r\n\r\n    //Draw HUD Objects\r\n    this.hudObjects.score.render(this.backBufferContext);\r\n    this.hudObjects.lives.render(this.backBufferContext);\r\n    this.hudObjects.level.render(this.backBufferContext);\r\n\r\n    //Bit blit the back buffer onto the screen\r\n    this.screenBufferContext.drawImage(this.backBufferCanvas, 0, 0);\r\n  }\r\n\r\n  /** @function loop()\r\n    * continuously loops the update and render function unless gameOver or paused\r\n    */\r\n  loop() {\r\n    //If not Paused or Game Over, continuously update and render\r\n    if(!this.paused && !this.gameOver) {\r\n      this.update();\r\n      this.render();\r\n    }\r\n    if(this.gameOver) {\r\n      //Draw the Game Over in Menu\r\n      this.menu.drawGameOver();\r\n    }\r\n  }\r\n}\r\n","\r\n/** @Class AudioController\r\n  * Class to control all audio objects, updating & playing.\r\n  */\r\nexport default class AudioController {\r\n  /** @Constructor\r\n    * No arguements. Loads all the audio files that will be needed.\r\n    */\r\n  constructor() {\r\n    //Menu & Theme songs have been found @ https://freesound.org/\r\n    this.menu = new Audio('./menu2.wav');\r\n    this.pickTheme();\r\n\r\n    //All Wav files below were created with BFXR\r\n    //Array of sounds for simplifing manipulating the sounds in mass\r\n    this.sounds = [];\r\n    this.sounds.push(this.menu);\r\n    this.over = new Audio('./gameOver.wav');\r\n    this.sounds.push(this.over);\r\n    this.collisionSound = new Audio('collision.wav');\r\n    this.collisionSound.volume = 0.50;\r\n    this.sounds.push(this.collisionSound);\r\n    this.explosion = new Audio('./Explosion.wav');\r\n    this.explosion.volume = 0.70;\r\n    this.sounds.push(this.explosion);\r\n    this.shipExplosion = new Audio('./shipExplosion.wav');\r\n    this.sounds.push(this.shipExplosion);\r\n    //this.laser = new Audio('./laserShoot.wav');\r\n    this.ufoLaser = new Audio('./ufoShot.wav');\r\n    this.sounds.push(this.ufoLaser);\r\n    this.homing = new Audio('./homing.wav');\r\n    this.homing.volume = 0.70;\r\n    this.sounds.push(this.homing);\r\n    this.teleportSound = new Audio('./teleport.wav');\r\n    this.sounds.push(this.teleportSound);\r\n    this.shieldBreak = new Audio('./shieldbreak.wav');\r\n    this.sounds.push(this.shieldBreak);\r\n    this.homingPickUp = new Audio('./homingpowerup.wav');\r\n    this.sounds.push(this.homingPickUp);\r\n  }\r\n\r\n  /** @Function pickTheme()\r\n    * Functon to handle picking one of the two themes.\r\n    */\r\n  pickTheme() {\r\n    if(Math.random() > 0.5) {\r\n      this.theme = new Audio('./theme.wav');\r\n    }\r\n    else {\r\n      this.theme = new Audio('./theme2.wav');\r\n    }\r\n  }\r\n\r\n  /** @Function playTheme()\r\n    * Function to play the theme on a loop.\r\n    */\r\n  playTheme() {\r\n    this.theme.volume = 0.1;\r\n    this.theme.loop = true;\r\n    this.theme.play();\r\n  }\r\n\r\n  /** @Function stopTheme\r\n    * Functon to stop the theme from playing.\r\n    */\r\n  stopTheme() {\r\n    this.theme.pause();\r\n  }\r\n\r\n  /** @Functon playMenu()\r\n    * Functon to play the menu music on a loop.\r\n    */\r\n  playMenu() {\r\n    this.menu.volume = 0.30;\r\n    this.menu.loop = true;\r\n    this.menu.play();\r\n  }\r\n\r\n  /** @Functon stopMenu()\r\n    * Function to stop the menu music.\r\n    */\r\n  stopMenu() {\r\n    this.menu.pause();\r\n  }\r\n\r\n  /** @Functon mute()\r\n    * Function to mute all the sounds & music.\r\n    */\r\n  mute() {\r\n    this.sounds.forEach(sound => {\r\n      sound.muted = true;\r\n    });\r\n    this.theme.muted = true;\r\n  }\r\n\r\n  /** @Functon unmute()\r\n    * Function to unmute all the sounds & music.\r\n    */\r\n  unmute() {\r\n    this.sounds.forEach(sound => {\r\n      sound.muted = false;\r\n    });\r\n    this.theme.muted = false;\r\n  }\r\n\r\n  /** @Functon trigger()\r\n    * Function to trigger a specific sound effect.\r\n    * @param {string} sound - the name of the sound that need to be played.\r\n    */\r\n  trigger(sound) {\r\n    switch (sound) {\r\n      case 'shoot':\r\n        this.ufoLaser.play();\r\n        break;\r\n      case 'homing':\r\n        this.homing.play();\r\n        break;\r\n      case 'homing pickup':\r\n        this.homingPickUp.play();\r\n        break;\r\n      case 'collision':\r\n        this.collisionSound.play();\r\n        break;\r\n      case 'explosion':\r\n        this.explosion.play();\r\n        break;\r\n      case 'shield broken':\r\n        this.shieldBreak.play();\r\n        break;\r\n      case 'ship explosion':\r\n        this.shipExplosion.play();\r\n        break;\r\n      case 'teleport':\r\n        this.teleportSound.play();\r\n        break;\r\n      case 'game over':\r\n        this.over.play();\r\n        break;\r\n      default:\r\n\r\n    }\r\n  }\r\n}\r\n","import Game from './game.js';\r\nimport './game.css';\r\nimport AudioController from './audiocontroller.js';\r\n\r\n/** @Class Menu\r\n\t* Object to control the menus & managing game state\r\n\t*/\r\nexport default class Menu {\r\n\t/** @Constructor\r\n\t\t* Initializes all essential variables for the menus & rendering\r\n\t\t*/\r\n\tconstructor() {\r\n\t\tthis.screenWidth = 1000;\r\n\t\t//State variable that changes how user input handling happens\r\n\t\tthis.gameState = 'main menu';\r\n\t\t//Game variable that will be turned into a Game Object\r\n\t\tthis.game = null;\r\n\t\t//Index variable for the array of buttons\r\n\t\tthis.highlighted = 0;\r\n\t\t//Array of button information such as location and size.\r\n\t\tthis.buttons = [];\r\n\t\tthis.buttonNames = ['start', 'mute', 'controls'];\r\n\t\t//Variable to control when menu music should start, to avoid auto-play erros from Google Chrome\r\n\t\tthis.musicStarted = false;\r\n\t\t//Keeps track of whether or not sounds are muted.\r\n\t\tthis.muted = false;\r\n\t\tthis.initButtons();\r\n\t\tthis.audioController = new AudioController();\r\n\r\n\t\t//Back Buffer\r\n\t\tthis.backBufferCanvas = document.getElementById(\"canvas\");\r\n\t\tthis.backBufferCanvas.width = this.screenWidth;\r\n\t\tthis.backBufferCanvas.height = this.screenWidth;\r\n\t\tthis.backBufferContext = this.backBufferCanvas.getContext('2d');\r\n\r\n\t\t//Canvas that actually gets put on the screen\r\n\t\tthis.screenBufferCanvas = document.getElementById(\"canvas\");\r\n\t\tthis.screenBufferCanvas.width = this.screenWidth;\r\n\t\tthis.screenBufferCanvas.height = this.screenWidth;\r\n\t\tdocument.body.appendChild(this.screenBufferCanvas);\r\n\t\tthis.screenBufferContext = this.screenBufferCanvas.getContext('2d');\r\n\r\n\t\t//Binders\r\n\t\tthis.render = this.render.bind(this);\r\n\t\tthis.handleKeyDown = this.handleKeyDown.bind(this);\r\n\t\tthis.handleMouseDown = this.handleMouseDown.bind(this);\r\n\t\twindow.onmousedown = this.handleMouseDown;\r\n\t\twindow.onkeydown = this.handleKeyDown;\r\n\r\n\t\t//Sets loop for menu, 60 fps\r\n\t\tthis.interval = setInterval(this.render, 50 / 3);\r\n\t}\r\n\r\n\t/** @Function initButtons()\r\n\t\t* Handles the initialization of button information\r\n\t\t*/\r\n\tinitButtons() {\r\n\t\tlet scaleY = 0.30;\r\n\t\tfor(let i = 0; i < 3; i++) {\r\n\t\t\tthis.buttons.push({x: this.screenWidth * 0.35, y: this.screenWidth * scaleY, width: this.screenWidth * 0.3, height: this.screenWidth * 0.1})\r\n\t\t\tscaleY += 0.15;\r\n\t\t}\r\n\t}\r\n\r\n\t/** @Function handleKeyDown()\r\n\t\t* Event handler function for user input.\r\n\t\t* @param {event} event - event object\r\n\t\t*/\r\n\thandleKeyDown(event){\r\n\t\tevent.preventDefault();\r\n\t\t//Allow menu music to start playing if it hasn't already\r\n\t\tif(!this.musicStarted) {\r\n\t\t\tthis.audioController.playMenu();\r\n\t\t\tthis.musicStarted = true;\r\n\t\t}\r\n\t\t//Check game state\r\n\t\tif(this.gameState === 'main menu') {\r\n\t\t\t//Enter\r\n\t\t\tif(event.keyCode === 13) {\r\n\t\t\t\t//Activate button that is highlighted\r\n\t\t\t\tthis.clickButton(this.buttonNames[this.highlighted]);\r\n\t\t\t}\r\n\t\t\t//W & Up arrow\r\n\t\t\tif(event.keyCode === 87 || event.keyCode === 38) {\r\n\t\t\t\t//Alter highlighted button\r\n\t\t\t\tthis.highlighted--;\r\n\t\t\t\tif(this.highlighted < 0) {\r\n\t\t\t\t\tthis.highlighted = this.buttons.length - 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//S & Down Arrow\r\n\t\t\tif(event.keyCode === 83 || event.keyCode === 40) {\r\n\t\t\t\t//Alter highlighted button\r\n\t\t\t\tthis.highlighted++;\r\n\t\t\t\tif(this.highlighted >= this.buttons.length) {\r\n\t\t\t\t\tthis.highlighted = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//If you are in the controls screen, just go back to the main menu.\r\n\t\telse if(this.gameState === 'controls') {\r\n\t\t\tthis.gameState = 'main menu';\r\n\t\t}\r\n\t}\r\n\r\n\t/** @Function handleMouseDown()\r\n\t\t* Event handler function for user input\r\n\t\t* @param {event} event - event object\r\n\t\t*/\r\n\thandleMouseDown(event) {\r\n\t\tevent.preventDefault();\r\n\t\t//Allow menu musice to start if it hasn't yet.\r\n\t\tif(!this.musicStarted) {\r\n\t\t\tthis.audioController.playMenu();\r\n\t\t\tthis.musicStarted = true;\r\n\t\t}\r\n\t\t//Adjust the client click position to the canvas position. Drawing with 1000px / 800px canvas (1000 / 800) = 5 / 4\r\n\t\tlet x = event.clientX * 5 / 4;\r\n\t\tlet y = event.clientY * 5 / 4;\r\n\t\t//Check game state\r\n\t\tif(this.gameState === 'main menu' || this.gameState === 'paused') {\r\n\t\t\t//Check if a button was clicked\r\n\t\t\tfor(let i = 0; i < this.buttons.length; i++) {\r\n\t\t\t\tlet check = Math.circleRectangleCollision(x, y, 10, this.buttons[i].x, this.buttons[i].y, this.buttons[i].width, this.buttons[i].height);\r\n\t\t\t\tif(check) {\r\n\t\t\t\t\t//Activate the button that was clicked.\r\n\t\t\t\t\tthis.clickButton(this.buttonNames[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//If in controls screen go back to menu.\r\n\t\telse if(this.gameState === 'controls') {\r\n\t\t\tthis.gameState = 'main menu';\r\n\t\t}\r\n\t\telse if(this.gameState === 'gameOver') {\r\n\t\t\t//Check if buttons have been clicked\r\n\t\t\tfor(let i = 1; i < this.buttons.length; i++) {\r\n\t\t\t\tlet check = Math.circleRectangleCollision(x, y, 10, this.buttons[i].x, this.buttons[i].y, this.buttons[i].width, this.buttons[i].height);\r\n\t\t\t\tif(check) {\r\n\t\t\t\t\tthis.clickButton(this.buttonNames[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/** @Function clickButton()\r\n\t\t* Activates the appropriate behavior\r\n\t\t* @param {string} button - name of the button pressed.\r\n\t\t*/\r\n\tclickButton(button) {\r\n\t\tswitch (button) {\r\n\t\t\tcase \"start\":\r\n\t\t\tcase \"restart\":\r\n\t\t\tcase 0:\r\n\t\t\t\t//Check it there is already a game object or not.\r\n\t\t\t\tif(this.game !== null) {\r\n\t\t\t\t\tthis.audioController.stopTheme();\r\n\t\t\t\t\tif(!this.muted) {\r\n\t\t\t\t\t\tthis.audioController.pickTheme();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//Reset the game object\r\n\t\t\t\t\tthis.game.masterReset();\r\n\t\t\t\t\tthis.gameState = \"game\";\r\n\t\t\t\t\tthis.audioController.stopMenu();\r\n\t\t\t\t\tthis.audioController.playTheme();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//If there isn't a game object, create one.\r\n\t\t\t\t\tthis.game = new Game(this);\r\n\t\t\t\t\tthis.gameState = \"game\";\r\n\t\t\t\t\tthis.audioController.playTheme();\r\n\t\t\t\t\tthis.audioController.stopMenu();\r\n\t\t\t\t}\r\n\t\t\t\t// Stop the menu interval\r\n\t\t\t\tclearInterval(this.interval);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"mute\":\r\n\t\t\tcase 1:\r\n\t\t\t//Check whether the sound is muted already or n\r\n\t\t\t\tif(this.muted) {\r\n\t\t\t\t\tthis.audioController.unmute();\r\n\t\t\t\t\tthis.muted = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.audioController.mute();\r\n\t\t\t\t\tthis.muted = true;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"controls\":\r\n\t\t\tcase 2:\r\n\t\t\t\t\tthis.gameState = \"controls\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"resume\":\r\n\t\t\t\tthis.gameState = \"game\";\r\n\t\t\t\tthis.game.paused = false;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/** @Function drawMenu()\r\n\t\t* Draws the buttons of the main menu\r\n\t\t*/\r\n\tdrawMenu() {\r\n\t\tthis.backBufferContext.save();\r\n\t\tthis.backBufferContext.fillStyle = \"blue\";\r\n\t\tfor(let i = 0; i < this.buttons.length; i++) {\r\n\t\t\t//Make sure the highlighted button is a brighter color\r\n\t\t\tif(this.highlighted === i) {\r\n\t\t\t\tthis.backBufferContext.strokeStyle = \"cyan\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.backBufferContext.strokeStyle = \"blue\";\r\n\t\t\t}\r\n\t\t\tthis.backBufferContext.strokeRect(this.buttons[i].x, this.buttons[i].y, this.buttons[i].width, this.buttons[i].height);\r\n\t\t}\r\n\r\n\t\tthis.backBufferContext.fillText(\"Start\", this.screenWidth * 0.44, this.screenWidth * 0.37);\r\n\t\tthis.backBufferContext.fillText(\"Mute\", this.screenWidth * 0.44, this.screenWidth * 0.52);\r\n\t\tthis.backBufferContext.fillText(\"Controls\", this.screenWidth * 0.41, this.screenWidth * 0.67);\r\n\t\tthis.backBufferContext.fillText(\"By: Troy Nagle\", this.screenWidth * 0.02, this.screenWidth * 0.98);\r\n\t\tthis.backBufferContext.font = '120px Times New Roman';\r\n\t\tthis.backBufferContext.fillText(\"Asteroids\", this.screenWidth * 0.05, this.screenWidth * 0.25);\r\n\t\tthis.backBufferContext.fillText(\" & \", this.screenWidth * 0.50, this.screenWidth * 0.25);\r\n\t\tthis.backBufferContext.fillText(\"Aliens\", this.screenWidth * 0.65, this.screenWidth * 0.25);\r\n\t\tthis.backBufferContext.restore();\r\n\r\n\t\tthis.screenBufferContext.drawImage(this.backBufferCanvas, 0, 0);\r\n\t}\r\n\r\n\t/** @Function drawControls()\r\n\t\t* Draws the controls screen\r\n\t\t*/\r\n\tdrawControls() {\r\n\t\tthis.backBufferContext.save();\r\n\t\tthis.backBufferContext.fillStyle = \"blue\";\r\n\t\tthis.backBufferContext.fillText(\"W or Up Arrow: Thruster\", this.screenWidth * 0.20, this.screenWidth * 0.25);\r\n\t\tthis.backBufferContext.fillText(\"A or Left Arrow: Rotate Left\", this.screenWidth * 0.17, this.screenWidth * 0.35);\r\n\t\tthis.backBufferContext.fillText(\"D or Right Arrow: Rotate Right\", this.screenWidth * 0.15, this.screenWidth * 0.45);\r\n\t\tthis.backBufferContext.fillText(\"Spacebar: Shoot\", this.screenWidth * 0.29, this.screenWidth * 0.55);\r\n\t\tthis.backBufferContext.fillText(\"Enter: Boost\", this.screenWidth * 0.34, this.screenWidth * 0.65);\r\n\t\tthis.backBufferContext.fillText(\"F: Teleport\", this.screenWidth * 0.36, this.screenWidth * 0.75);\r\n\t\tthis.backBufferContext.fillText(\"Any Key to Go Back\", this.screenWidth * 0.26, this.screenWidth * 0.90);\r\n\t\tthis.backBufferContext.restore();\r\n\t\tthis.screenBufferContext.drawImage(this.backBufferCanvas, 0, 0);\r\n\t}\r\n\r\n\t/** @Function drawPauseMenu()\r\n\t\t* Draws the buttons of the pause menu.\r\n\t\t*/\r\n\tdrawPauseMenu() {\r\n\t\tthis.backBufferContext.save();\r\n\t\tthis.backBufferContext.fillStyle = \"black\";\r\n\t\tthis.backBufferContext.strokeStyle = \"blue\";\r\n\t\tfor(let i = 0; i < this.buttons.length; i++) {\r\n\t\t\tthis.backBufferContext.fillRect(this.buttons[i].x, this.buttons[i].y, this.buttons[i].width, this.buttons[i].height);\r\n\t\t\tthis.backBufferContext.strokeRect(this.buttons[i].x, this.buttons[i].y, this.buttons[i].width, this.buttons[i].height);\r\n\t\t}\r\n\t\tthis.backBufferContext.fillStyle = \"blue\";\r\n\t\tthis.backBufferContext.fillText(\"Resume\", this.screenWidth * 0.42, this.screenWidth * 0.37);\r\n\t\tthis.backBufferContext.fillText(\"Restart\", this.screenWidth * 0.43, this.screenWidth * 0.52);\r\n\t\tthis.backBufferContext.fillText(\"Mute\", this.screenWidth * 0.44, this.screenWidth * 0.67);\r\n\t\tthis.backBufferContext.restore();\r\n\t\tthis.screenBufferContext.drawImage(this.backBufferCanvas, 0, 0);\r\n\t}\r\n\r\n\t/** @Function drawGameOver()\r\n\t\t* Draws the game over screen & buttons\r\n\t\t*/\r\n\tdrawGameOver() {\r\n\t\tthis.backBufferContext.save();\r\n\t\tthis.backBufferContext.fillStyle = \"black\";\r\n\t\tthis.backBufferContext.strokeStyle = \"blue\";\r\n\t\tfor(let i = 1; i < this.buttons.length; i++) {\r\n\t\t\tthis.backBufferContext.fillRect(this.buttons[i].x, this.buttons[i].y, this.buttons[i].width, this.buttons[i].height);\r\n\t\t\tthis.backBufferContext.strokeRect(this.buttons[i].x, this.buttons[i].y, this.buttons[i].width, this.buttons[i].height);\r\n\t\t}\r\n\t\tthis.backBufferContext.fillStyle = \"blue\";\r\n\t\tthis.backBufferContext.font = '100px Times New Roman';\r\n\t\tthis.backBufferContext.fillText(\"Game Over\", this.screenWidth * 0.30, this.screenWidth * 0.30);\r\n\t\tthis.backBufferContext.font = '50px Arial';\r\n\t\tthis.backBufferContext.fillText(\"Restart\", this.screenWidth * 0.43, this.screenWidth * 0.52);\r\n\t\tthis.backBufferContext.fillText(\"Mute\", this.screenWidth * 0.44, this.screenWidth * 0.67);\r\n\t\tthis.backBufferContext.restore();\r\n\t\tthis.screenBufferContext.drawImage(this.backBufferCanvas, 0, 0);\r\n\t}\r\n\r\n\t/** @Function render()\r\n\t\t* Refreshes the screen & calls certain draw functions depending on the game state.\r\n\t\t*/\r\n\trender() {\r\n\t\t//Initial Setup\r\n\t\tthis.backBufferContext.fillStyle = 'black';\r\n\t\tthis.backBufferContext.font = '50px Arial';\r\n\t\t//Refresh canvas\r\n\t\tthis.backBufferContext.fillRect(0,0, this.screenWidth, this.screenWidth);\r\n\t\tif(this.gameState === \"main menu\") {\r\n\t\t\tthis.drawMenu();\r\n\t\t}\r\n\t\telse if(this.gameState === \"controls\") {\r\n\t\t\tthis.drawControls();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//Make sure the Script immediately starts up with the menu.\r\nnew Menu();\r\n"],"sourceRoot":""}